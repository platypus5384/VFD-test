
VFD-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b6c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d38  08002d38  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d38  08002d38  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d38  08002d38  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d38  08002d38  00012d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d3c  08002d3c  00012d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000001c  08002d5c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002d5c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bcd2  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001efb  00000000  00000000  0002bd61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c28  00000000  00000000  0002dc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000947  00000000  00000000  0002e888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000206da  00000000  00000000  0002f1cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e732  00000000  00000000  0004f8a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c45e8  00000000  00000000  0005dfdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003154  00000000  00000000  001225c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00125718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000001c 	.word	0x2000001c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002ce0 	.word	0x08002ce0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000020 	.word	0x20000020
 80001c8:	08002ce0 	.word	0x08002ce0

080001cc <litBit>:
		0x39, // C: 0111001
		0x5E, // D: 1011110
		0x79, // E: 1111001
		0x71  // F: 1110001
};
void litBit(uint8_t data){
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	f003 0301 	and.w	r3, r3, #1
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	461a      	mov	r2, r3
 80001e0:	2101      	movs	r1, #1
 80001e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001e6:	f000 ff21 	bl	800102c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	105b      	asrs	r3, r3, #1
 80001ee:	b2db      	uxtb	r3, r3
 80001f0:	f003 0301 	and.w	r3, r3, #1
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	461a      	mov	r2, r3
 80001f8:	2102      	movs	r1, #2
 80001fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001fe:	f000 ff15 	bl	800102c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	109b      	asrs	r3, r3, #2
 8000206:	b2db      	uxtb	r3, r3
 8000208:	f003 0301 	and.w	r3, r3, #1
 800020c:	b2db      	uxtb	r3, r3
 800020e:	461a      	mov	r2, r3
 8000210:	2104      	movs	r1, #4
 8000212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000216:	f000 ff09 	bl	800102c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	10db      	asrs	r3, r3, #3
 800021e:	b2db      	uxtb	r3, r3
 8000220:	f003 0301 	and.w	r3, r3, #1
 8000224:	b2db      	uxtb	r3, r3
 8000226:	461a      	mov	r2, r3
 8000228:	2108      	movs	r1, #8
 800022a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022e:	f000 fefd 	bl	800102c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	111b      	asrs	r3, r3, #4
 8000236:	b2db      	uxtb	r3, r3
 8000238:	f003 0301 	and.w	r3, r3, #1
 800023c:	b2db      	uxtb	r3, r3
 800023e:	461a      	mov	r2, r3
 8000240:	2110      	movs	r1, #16
 8000242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000246:	f000 fef1 	bl	800102c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	115b      	asrs	r3, r3, #5
 800024e:	b2db      	uxtb	r3, r3
 8000250:	f003 0301 	and.w	r3, r3, #1
 8000254:	b2db      	uxtb	r3, r3
 8000256:	461a      	mov	r2, r3
 8000258:	2120      	movs	r1, #32
 800025a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025e:	f000 fee5 	bl	800102c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	119b      	asrs	r3, r3, #6
 8000266:	b2db      	uxtb	r3, r3
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	b2db      	uxtb	r3, r3
 800026e:	461a      	mov	r2, r3
 8000270:	2140      	movs	r1, #64	; 0x40
 8000272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000276:	f000 fed9 	bl	800102c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_DP_GPIO_Port, SEG_DP_Pin, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	09db      	lsrs	r3, r3, #7
 800027e:	b2db      	uxtb	r3, r3
 8000280:	461a      	mov	r2, r3
 8000282:	2180      	movs	r1, #128	; 0x80
 8000284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000288:	f000 fed0 	bl	800102c <HAL_GPIO_WritePin>
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <displayNumber>:

void displayNumber(uint8_t number){
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
	if (0 <= number && number <= 0x0F){
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	2b0f      	cmp	r3, #15
 80002a2:	d805      	bhi.n	80002b0 <displayNumber+0x1c>
		litBit(segmentPatterns[number]);
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <displayNumber+0x24>)
 80002a8:	5cd3      	ldrb	r3, [r2, r3]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ff8e 	bl	80001cc <litBit>
	}
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000000 	.word	0x20000000

080002bc <enableDigit>:

void enableDigit(uint8_t digit){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
	switch(digit){
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	2b05      	cmp	r3, #5
 80002ca:	d835      	bhi.n	8000338 <enableDigit+0x7c>
 80002cc:	a201      	add	r2, pc, #4	; (adr r2, 80002d4 <enableDigit+0x18>)
 80002ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d2:	bf00      	nop
 80002d4:	080002ed 	.word	0x080002ed
 80002d8:	080002fb 	.word	0x080002fb
 80002dc:	08000309 	.word	0x08000309
 80002e0:	08000315 	.word	0x08000315
 80002e4:	08000321 	.word	0x08000321
 80002e8:	0800032d 	.word	0x0800032d
	case 0:
		HAL_GPIO_WritePin(GRID1_GPIO_Port, GRID1_Pin, GPIO_PIN_SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f2:	4813      	ldr	r0, [pc, #76]	; (8000340 <enableDigit+0x84>)
 80002f4:	f000 fe9a 	bl	800102c <HAL_GPIO_WritePin>
		break;
 80002f8:	e01e      	b.n	8000338 <enableDigit+0x7c>
	case 1:
		HAL_GPIO_WritePin(GRID2_GPIO_Port, GRID2_Pin, GPIO_PIN_SET);
 80002fa:	2201      	movs	r2, #1
 80002fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000300:	480f      	ldr	r0, [pc, #60]	; (8000340 <enableDigit+0x84>)
 8000302:	f000 fe93 	bl	800102c <HAL_GPIO_WritePin>
		break;
 8000306:	e017      	b.n	8000338 <enableDigit+0x7c>
	case 2:
		HAL_GPIO_WritePin(GRID3_GPIO_Port, GRID3_Pin, GPIO_PIN_SET);
 8000308:	2201      	movs	r2, #1
 800030a:	2180      	movs	r1, #128	; 0x80
 800030c:	480c      	ldr	r0, [pc, #48]	; (8000340 <enableDigit+0x84>)
 800030e:	f000 fe8d 	bl	800102c <HAL_GPIO_WritePin>
		break;
 8000312:	e011      	b.n	8000338 <enableDigit+0x7c>
	case 3:
		HAL_GPIO_WritePin(GRID4_GPIO_Port, GRID4_Pin, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	2140      	movs	r1, #64	; 0x40
 8000318:	4809      	ldr	r0, [pc, #36]	; (8000340 <enableDigit+0x84>)
 800031a:	f000 fe87 	bl	800102c <HAL_GPIO_WritePin>
		break;
 800031e:	e00b      	b.n	8000338 <enableDigit+0x7c>
	case 4:
		HAL_GPIO_WritePin(GRID5_GPIO_Port, GRID5_Pin, GPIO_PIN_SET);
 8000320:	2201      	movs	r2, #1
 8000322:	2120      	movs	r1, #32
 8000324:	4806      	ldr	r0, [pc, #24]	; (8000340 <enableDigit+0x84>)
 8000326:	f000 fe81 	bl	800102c <HAL_GPIO_WritePin>
		break;
 800032a:	e005      	b.n	8000338 <enableDigit+0x7c>
	case 5:
		HAL_GPIO_WritePin(GRID6_GPIO_Port, GRID6_Pin, GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	2110      	movs	r1, #16
 8000330:	4803      	ldr	r0, [pc, #12]	; (8000340 <enableDigit+0x84>)
 8000332:	f000 fe7b 	bl	800102c <HAL_GPIO_WritePin>
		break;
 8000336:	bf00      	nop
	}
}
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	48000400 	.word	0x48000400

08000344 <disableDigit>:

void disableDigit(uint8_t digit){
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
	switch(digit){
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	2b05      	cmp	r3, #5
 8000352:	d835      	bhi.n	80003c0 <disableDigit+0x7c>
 8000354:	a201      	add	r2, pc, #4	; (adr r2, 800035c <disableDigit+0x18>)
 8000356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800035a:	bf00      	nop
 800035c:	08000375 	.word	0x08000375
 8000360:	08000383 	.word	0x08000383
 8000364:	08000391 	.word	0x08000391
 8000368:	0800039d 	.word	0x0800039d
 800036c:	080003a9 	.word	0x080003a9
 8000370:	080003b5 	.word	0x080003b5
	case 0:
		HAL_GPIO_WritePin(GRID1_GPIO_Port, GRID1_Pin, GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 7100 	mov.w	r1, #512	; 0x200
 800037a:	4813      	ldr	r0, [pc, #76]	; (80003c8 <disableDigit+0x84>)
 800037c:	f000 fe56 	bl	800102c <HAL_GPIO_WritePin>
		break;
 8000380:	e01e      	b.n	80003c0 <disableDigit+0x7c>
	case 1:
		HAL_GPIO_WritePin(GRID2_GPIO_Port, GRID2_Pin, GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000388:	480f      	ldr	r0, [pc, #60]	; (80003c8 <disableDigit+0x84>)
 800038a:	f000 fe4f 	bl	800102c <HAL_GPIO_WritePin>
		break;
 800038e:	e017      	b.n	80003c0 <disableDigit+0x7c>
	case 2:
		HAL_GPIO_WritePin(GRID3_GPIO_Port, GRID3_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2180      	movs	r1, #128	; 0x80
 8000394:	480c      	ldr	r0, [pc, #48]	; (80003c8 <disableDigit+0x84>)
 8000396:	f000 fe49 	bl	800102c <HAL_GPIO_WritePin>
		break;
 800039a:	e011      	b.n	80003c0 <disableDigit+0x7c>
	case 3:
		HAL_GPIO_WritePin(GRID4_GPIO_Port, GRID4_Pin, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2140      	movs	r1, #64	; 0x40
 80003a0:	4809      	ldr	r0, [pc, #36]	; (80003c8 <disableDigit+0x84>)
 80003a2:	f000 fe43 	bl	800102c <HAL_GPIO_WritePin>
		break;
 80003a6:	e00b      	b.n	80003c0 <disableDigit+0x7c>
	case 4:
		HAL_GPIO_WritePin(GRID5_GPIO_Port, GRID5_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2120      	movs	r1, #32
 80003ac:	4806      	ldr	r0, [pc, #24]	; (80003c8 <disableDigit+0x84>)
 80003ae:	f000 fe3d 	bl	800102c <HAL_GPIO_WritePin>
		break;
 80003b2:	e005      	b.n	80003c0 <disableDigit+0x7c>
	case 5:
		HAL_GPIO_WritePin(GRID6_GPIO_Port, GRID6_Pin, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2110      	movs	r1, #16
 80003b8:	4803      	ldr	r0, [pc, #12]	; (80003c8 <disableDigit+0x84>)
 80003ba:	f000 fe37 	bl	800102c <HAL_GPIO_WritePin>
		break;
 80003be:	bf00      	nop
	}
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	48000400 	.word	0x48000400

080003cc <disableAllDigit>:

void disableAllDigit(){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GRID1_GPIO_Port, GRID1_Pin, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003d6:	480f      	ldr	r0, [pc, #60]	; (8000414 <disableAllDigit+0x48>)
 80003d8:	f000 fe28 	bl	800102c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRID2_GPIO_Port, GRID2_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e2:	480c      	ldr	r0, [pc, #48]	; (8000414 <disableAllDigit+0x48>)
 80003e4:	f000 fe22 	bl	800102c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRID3_GPIO_Port, GRID3_Pin, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2180      	movs	r1, #128	; 0x80
 80003ec:	4809      	ldr	r0, [pc, #36]	; (8000414 <disableAllDigit+0x48>)
 80003ee:	f000 fe1d 	bl	800102c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRID4_GPIO_Port, GRID4_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2140      	movs	r1, #64	; 0x40
 80003f6:	4807      	ldr	r0, [pc, #28]	; (8000414 <disableAllDigit+0x48>)
 80003f8:	f000 fe18 	bl	800102c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRID5_GPIO_Port, GRID5_Pin, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2120      	movs	r1, #32
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <disableAllDigit+0x48>)
 8000402:	f000 fe13 	bl	800102c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRID6_GPIO_Port, GRID6_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2110      	movs	r1, #16
 800040a:	4802      	ldr	r0, [pc, #8]	; (8000414 <disableAllDigit+0x48>)
 800040c:	f000 fe0e 	bl	800102c <HAL_GPIO_WritePin>
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	48000400 	.word	0x48000400

08000418 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800041e:	f000 fb0c 	bl	8000a3a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000422:	f000 f897 	bl	8000554 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000426:	f000 f98f 	bl	8000748 <MX_GPIO_Init>
	MX_I2C1_Init();
 800042a:	f000 f8e9 	bl	8000600 <MX_I2C1_Init>
	MX_RTC_Init();
 800042e:	f000 f925 	bl	800067c <MX_RTC_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t ct = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	77fb      	strb	r3, [r7, #31]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	disableAllDigit();
 8000436:	f7ff ffc9 	bl	80003cc <disableAllDigit>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2200      	movs	r2, #0
 800043e:	4619      	mov	r1, r3
 8000440:	4842      	ldr	r0, [pc, #264]	; (800054c <main+0x134>)
 8000442:	f002 f9f0 	bl	8002826 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 8000446:	f107 0318 	add.w	r3, r7, #24
 800044a:	2201      	movs	r2, #1
 800044c:	4619      	mov	r1, r3
 800044e:	483f      	ldr	r0, [pc, #252]	; (800054c <main+0x134>)
 8000450:	f002 facc 	bl	80029ec <HAL_RTC_GetDate>


		disableDigit(5); enableDigit(0);
 8000454:	2005      	movs	r0, #5
 8000456:	f7ff ff75 	bl	8000344 <disableDigit>
 800045a:	2000      	movs	r0, #0
 800045c:	f7ff ff2e 	bl	80002bc <enableDigit>
		displayNumber(gTime.Seconds % 10);
 8000460:	79ba      	ldrb	r2, [r7, #6]
 8000462:	4b3b      	ldr	r3, [pc, #236]	; (8000550 <main+0x138>)
 8000464:	fba3 1302 	umull	r1, r3, r3, r2
 8000468:	08d9      	lsrs	r1, r3, #3
 800046a:	460b      	mov	r3, r1
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	440b      	add	r3, r1
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	1ad3      	subs	r3, r2, r3
 8000474:	b2db      	uxtb	r3, r3
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ff0c 	bl	8000294 <displayNumber>
		HAL_Delay(DIGIT_DELAY);
 800047c:	2002      	movs	r0, #2
 800047e:	f000 fb51 	bl	8000b24 <HAL_Delay>

		disableDigit(0); enableDigit(1);
 8000482:	2000      	movs	r0, #0
 8000484:	f7ff ff5e 	bl	8000344 <disableDigit>
 8000488:	2001      	movs	r0, #1
 800048a:	f7ff ff17 	bl	80002bc <enableDigit>
		displayNumber(gTime.Seconds / 10);
 800048e:	79bb      	ldrb	r3, [r7, #6]
 8000490:	4a2f      	ldr	r2, [pc, #188]	; (8000550 <main+0x138>)
 8000492:	fba2 2303 	umull	r2, r3, r2, r3
 8000496:	08db      	lsrs	r3, r3, #3
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff fefa 	bl	8000294 <displayNumber>
		HAL_Delay(DIGIT_DELAY);
 80004a0:	2002      	movs	r0, #2
 80004a2:	f000 fb3f 	bl	8000b24 <HAL_Delay>


		disableDigit(1); enableDigit(2);
 80004a6:	2001      	movs	r0, #1
 80004a8:	f7ff ff4c 	bl	8000344 <disableDigit>
 80004ac:	2002      	movs	r0, #2
 80004ae:	f7ff ff05 	bl	80002bc <enableDigit>
		displayNumber(gTime.Minutes % 10);
 80004b2:	797a      	ldrb	r2, [r7, #5]
 80004b4:	4b26      	ldr	r3, [pc, #152]	; (8000550 <main+0x138>)
 80004b6:	fba3 1302 	umull	r1, r3, r3, r2
 80004ba:	08d9      	lsrs	r1, r3, #3
 80004bc:	460b      	mov	r3, r1
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	440b      	add	r3, r1
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff fee3 	bl	8000294 <displayNumber>
		HAL_Delay(DIGIT_DELAY);
 80004ce:	2002      	movs	r0, #2
 80004d0:	f000 fb28 	bl	8000b24 <HAL_Delay>
		disableDigit(2); enableDigit(3);
 80004d4:	2002      	movs	r0, #2
 80004d6:	f7ff ff35 	bl	8000344 <disableDigit>
 80004da:	2003      	movs	r0, #3
 80004dc:	f7ff feee 	bl	80002bc <enableDigit>
		displayNumber(gTime.Minutes / 10);
 80004e0:	797b      	ldrb	r3, [r7, #5]
 80004e2:	4a1b      	ldr	r2, [pc, #108]	; (8000550 <main+0x138>)
 80004e4:	fba2 2303 	umull	r2, r3, r2, r3
 80004e8:	08db      	lsrs	r3, r3, #3
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff fed1 	bl	8000294 <displayNumber>
		HAL_Delay(DIGIT_DELAY);
 80004f2:	2002      	movs	r0, #2
 80004f4:	f000 fb16 	bl	8000b24 <HAL_Delay>

		disableDigit(3); enableDigit(4);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f7ff ff23 	bl	8000344 <disableDigit>
 80004fe:	2004      	movs	r0, #4
 8000500:	f7ff fedc 	bl	80002bc <enableDigit>
		displayNumber(gTime.Hours % 10);
 8000504:	793a      	ldrb	r2, [r7, #4]
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <main+0x138>)
 8000508:	fba3 1302 	umull	r1, r3, r3, r2
 800050c:	08d9      	lsrs	r1, r3, #3
 800050e:	460b      	mov	r3, r1
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	440b      	add	r3, r1
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	1ad3      	subs	r3, r2, r3
 8000518:	b2db      	uxtb	r3, r3
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff feba 	bl	8000294 <displayNumber>
		HAL_Delay(DIGIT_DELAY);
 8000520:	2002      	movs	r0, #2
 8000522:	f000 faff 	bl	8000b24 <HAL_Delay>
		disableDigit(4); enableDigit(5);
 8000526:	2004      	movs	r0, #4
 8000528:	f7ff ff0c 	bl	8000344 <disableDigit>
 800052c:	2005      	movs	r0, #5
 800052e:	f7ff fec5 	bl	80002bc <enableDigit>
		displayNumber(gTime.Hours / 10);
 8000532:	793b      	ldrb	r3, [r7, #4]
 8000534:	4a06      	ldr	r2, [pc, #24]	; (8000550 <main+0x138>)
 8000536:	fba2 2303 	umull	r2, r3, r2, r3
 800053a:	08db      	lsrs	r3, r3, #3
 800053c:	b2db      	uxtb	r3, r3
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff fea8 	bl	8000294 <displayNumber>
		HAL_Delay(DIGIT_DELAY);
 8000544:	2002      	movs	r0, #2
 8000546:	f000 faed 	bl	8000b24 <HAL_Delay>
		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800054a:	e776      	b.n	800043a <main+0x22>
 800054c:	2000008c 	.word	0x2000008c
 8000550:	cccccccd 	.word	0xcccccccd

08000554 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b096      	sub	sp, #88	; 0x58
 8000558:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	2244      	movs	r2, #68	; 0x44
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f002 fb8f 	bl	8002c86 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	463b      	mov	r3, r7
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000576:	f44f 7000 	mov.w	r0, #512	; 0x200
 800057a:	f000 febf 	bl	80012fc <HAL_PWREx_ControlVoltageScaling>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000584:	f000 f942 	bl	800080c <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000588:	f000 fe9a 	bl	80012c0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800058c:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <SystemClock_Config+0xa8>)
 800058e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000592:	4a1a      	ldr	r2, [pc, #104]	; (80005fc <SystemClock_Config+0xa8>)
 8000594:	f023 0318 	bic.w	r3, r3, #24
 8000598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800059c:	2314      	movs	r3, #20
 800059e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005ac:	2360      	movs	r3, #96	; 0x60
 80005ae:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fef5 	bl	80013a8 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x74>
	{
		Error_Handler();
 80005c4:	f000 f922 	bl	800080c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 faf5 	bl	8001bd0 <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80005ec:	f000 f90e 	bl	800080c <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 80005f0:	f001 fef2 	bl	80023d8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005f4:	bf00      	nop
 80005f6:	3758      	adds	r7, #88	; 0x58
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000

08000600 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_I2C1_Init+0x74>)
 8000606:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <MX_I2C1_Init+0x78>)
 8000608:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000E14;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_I2C1_Init+0x74>)
 800060c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000610:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_I2C1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_I2C1_Init+0x74>)
 800061a:	2201      	movs	r2, #1
 800061c:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_I2C1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_I2C1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_I2C1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_I2C1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <MX_I2C1_Init+0x74>)
 800063e:	f000 fd0d 	bl	800105c <HAL_I2C_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8000648:	f000 f8e0 	bl	800080c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800064c:	2100      	movs	r1, #0
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <MX_I2C1_Init+0x74>)
 8000650:	f000 fd9f 	bl	8001192 <HAL_I2CEx_ConfigAnalogFilter>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_I2C1_Init+0x5e>
	{
		Error_Handler();
 800065a:	f000 f8d7 	bl	800080c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800065e:	2100      	movs	r1, #0
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <MX_I2C1_Init+0x74>)
 8000662:	f000 fde1 	bl	8001228 <HAL_I2CEx_ConfigDigitalFilter>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_I2C1_Init+0x70>
	{
		Error_Handler();
 800066c:	f000 f8ce 	bl	800080c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000038 	.word	0x20000038
 8000678:	40005400 	.word	0x40005400

0800067c <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000682:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <MX_RTC_Init+0xc4>)
 8000684:	4a2f      	ldr	r2, [pc, #188]	; (8000744 <MX_RTC_Init+0xc8>)
 8000686:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000688:	4b2d      	ldr	r3, [pc, #180]	; (8000740 <MX_RTC_Init+0xc4>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 800068e:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <MX_RTC_Init+0xc4>)
 8000690:	227f      	movs	r2, #127	; 0x7f
 8000692:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000694:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <MX_RTC_Init+0xc4>)
 8000696:	22ff      	movs	r2, #255	; 0xff
 8000698:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800069a:	4b29      	ldr	r3, [pc, #164]	; (8000740 <MX_RTC_Init+0xc4>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <MX_RTC_Init+0xc4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <MX_RTC_Init+0xc4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006ac:	4b24      	ldr	r3, [pc, #144]	; (8000740 <MX_RTC_Init+0xc4>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006b2:	4823      	ldr	r0, [pc, #140]	; (8000740 <MX_RTC_Init+0xc4>)
 80006b4:	f001 ff92 	bl	80025dc <HAL_RTC_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_RTC_Init+0x46>
	{
		Error_Handler();
 80006be:	f000 f8a5 	bl	800080c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */
#define MAGIC_NO 0x1200

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != MAGIC_NO)
 80006c2:	2100      	movs	r1, #0
 80006c4:	481e      	ldr	r0, [pc, #120]	; (8000740 <MX_RTC_Init+0xc4>)
 80006c6:	f002 fac8 	bl	8002c5a <HAL_RTCEx_BKUPRead>
 80006ca:	4603      	mov	r3, r0
 80006cc:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 80006d0:	d032      	beq.n	8000738 <MX_RTC_Init+0xbc>
	{
		RTC_TimeTypeDef sTime = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = {0};
 80006e0:	2300      	movs	r3, #0
 80006e2:	603b      	str	r3, [r7, #0]

		sTime.Hours = 14;
 80006e4:	230e      	movs	r3, #14
 80006e6:	713b      	strb	r3, [r7, #4]
		sTime.Minutes = 41;
 80006e8:	2329      	movs	r3, #41	; 0x29
 80006ea:	717b      	strb	r3, [r7, #5]
		sTime.Seconds = 40;
 80006ec:	2328      	movs	r3, #40	; 0x28
 80006ee:	71bb      	strb	r3, [r7, #6]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	4619      	mov	r1, r3
 80006f6:	4812      	ldr	r0, [pc, #72]	; (8000740 <MX_RTC_Init+0xc4>)
 80006f8:	f001 fff8 	bl	80026ec <HAL_RTC_SetTime>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_RTC_Init+0x8a>
		{
			Error_Handler();
 8000702:	f000 f883 	bl	800080c <Error_Handler>
		}
		sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000706:	2307      	movs	r3, #7
 8000708:	703b      	strb	r3, [r7, #0]
		sDate.Month = RTC_MONTH_FEBRUARY;
 800070a:	2302      	movs	r3, #2
 800070c:	707b      	strb	r3, [r7, #1]
		sDate.Date = 18;
 800070e:	2312      	movs	r3, #18
 8000710:	70bb      	strb	r3, [r7, #2]
		sDate.Year = 24;
 8000712:	2318      	movs	r3, #24
 8000714:	70fb      	strb	r3, [r7, #3]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	4619      	mov	r1, r3
 800071c:	4808      	ldr	r0, [pc, #32]	; (8000740 <MX_RTC_Init+0xc4>)
 800071e:	f002 f8de 	bl	80028de <HAL_RTC_SetDate>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_RTC_Init+0xb0>
		{
			Error_Handler();
 8000728:	f000 f870 	bl	800080c <Error_Handler>

		}
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, MAGIC_NO);
 800072c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8000730:	2100      	movs	r1, #0
 8000732:	4803      	ldr	r0, [pc, #12]	; (8000740 <MX_RTC_Init+0xc4>)
 8000734:	f002 fa78 	bl	8002c28 <HAL_RTCEx_BKUPWrite>
	}
	/* USER CODE END RTC_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000008c 	.word	0x2000008c
 8000744:	40002800 	.word	0x40002800

08000748 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_GPIO_Init+0xbc>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a28      	ldr	r2, [pc, #160]	; (8000804 <MX_GPIO_Init+0xbc>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_GPIO_Init+0xbc>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_GPIO_Init+0xbc>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a22      	ldr	r2, [pc, #136]	; (8000804 <MX_GPIO_Init+0xbc>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_GPIO_Init+0xbc>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_GPIO_Init+0xbc>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <MX_GPIO_Init+0xbc>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_GPIO_Init+0xbc>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin
 80007a6:	2200      	movs	r2, #0
 80007a8:	21ff      	movs	r1, #255	; 0xff
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f000 fc3d 	bl	800102c <HAL_GPIO_WritePin>
			|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SEG_MINUS_Pin|LED_Pin|GRID6_Pin|GRID5_Pin
 80007b2:	2200      	movs	r2, #0
 80007b4:	f242 31f1 	movw	r1, #9201	; 0x23f1
 80007b8:	4813      	ldr	r0, [pc, #76]	; (8000808 <MX_GPIO_Init+0xc0>)
 80007ba:	f000 fc37 	bl	800102c <HAL_GPIO_WritePin>
			|GRID4_Pin|GRID3_Pin|GRID2_Pin|GRID1_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_D_Pin
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin SEG_DP_Pin */
	GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin
 80007be:	23ff      	movs	r3, #255	; 0xff
 80007c0:	60fb      	str	r3, [r7, #12]
			|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	4619      	mov	r1, r3
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d8:	f000 faae 	bl	8000d38 <HAL_GPIO_Init>

	/*Configure GPIO pins : SEG_MINUS_Pin LED_Pin GRID6_Pin GRID5_Pin
                           GRID4_Pin GRID3_Pin GRID2_Pin GRID1_Pin */
	GPIO_InitStruct.Pin = SEG_MINUS_Pin|LED_Pin|GRID6_Pin|GRID5_Pin
 80007dc:	f242 33f1 	movw	r3, #9201	; 0x23f1
 80007e0:	60fb      	str	r3, [r7, #12]
			|GRID4_Pin|GRID3_Pin|GRID2_Pin|GRID1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_GPIO_Init+0xc0>)
 80007f6:	f000 fa9f 	bl	8000d38 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	bf00      	nop
 80007fc:	3720      	adds	r7, #32
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000
 8000808:	48000400 	.word	0x48000400

0800080c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_MspInit+0x44>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000822:	4a0e      	ldr	r2, [pc, #56]	; (800085c <HAL_MspInit+0x44>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6613      	str	r3, [r2, #96]	; 0x60
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <HAL_MspInit+0x44>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_MspInit+0x44>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <HAL_MspInit+0x44>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	6593      	str	r3, [r2, #88]	; 0x58
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000

08000860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b0a0      	sub	sp, #128	; 0x80
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	225c      	movs	r2, #92	; 0x5c
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f002 fa00 	bl	8002c86 <memset>
  if(hi2c->Instance==I2C1)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a1f      	ldr	r2, [pc, #124]	; (8000908 <HAL_I2C_MspInit+0xa8>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d137      	bne.n	8000900 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000890:	2340      	movs	r3, #64	; 0x40
 8000892:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000894:	2300      	movs	r3, #0
 8000896:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4618      	mov	r0, r3
 800089e:	f001 fb83 	bl	8001fa8 <HAL_RCCEx_PeriphCLKConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008a8:	f7ff ffb0 	bl	800080c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <HAL_I2C_MspInit+0xac>)
 80008ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b0:	4a16      	ldr	r2, [pc, #88]	; (800090c <HAL_I2C_MspInit+0xac>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <HAL_I2C_MspInit+0xac>)
 80008ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ca:	2312      	movs	r3, #18
 80008cc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008d6:	2304      	movs	r3, #4
 80008d8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008de:	4619      	mov	r1, r3
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e4:	f000 fa28 	bl	8000d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_I2C_MspInit+0xac>)
 80008ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <HAL_I2C_MspInit+0xac>)
 80008ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f2:	6593      	str	r3, [r2, #88]	; 0x58
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_I2C_MspInit+0xac>)
 80008f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000900:	bf00      	nop
 8000902:	3780      	adds	r7, #128	; 0x80
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40005400 	.word	0x40005400
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b09a      	sub	sp, #104	; 0x68
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	225c      	movs	r2, #92	; 0x5c
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f002 f9b0 	bl	8002c86 <memset>
  if(hrtc->Instance==RTC)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_RTC_MspInit+0x58>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d117      	bne.n	8000960 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000934:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fb31 	bl	8001fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800094c:	f7ff ff5e 	bl	800080c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_RTC_MspInit+0x5c>)
 8000952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000956:	4a05      	ldr	r2, [pc, #20]	; (800096c <HAL_RTC_MspInit+0x5c>)
 8000958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800095c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000960:	bf00      	nop
 8000962:	3768      	adds	r7, #104	; 0x68
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40002800 	.word	0x40002800
 800096c:	40021000 	.word	0x40021000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f892 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009ec:	f7ff ffea 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f2:	490d      	ldr	r1, [pc, #52]	; (8000a28 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f4:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <LoopForever+0xe>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a08:	4c0a      	ldr	r4, [pc, #40]	; (8000a34 <LoopForever+0x16>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a16:	f002 f93f 	bl	8002c98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1a:	f7ff fcfd 	bl	8000418 <main>

08000a1e <LoopForever>:

LoopForever:
    b LoopForever
 8000a1e:	e7fe      	b.n	8000a1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a2c:	08002d40 	.word	0x08002d40
  ldr r2, =_sbss
 8000a30:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a34:	200000b4 	.word	0x200000b4

08000a38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_IRQHandler>

08000a3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f943 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a4a:	200f      	movs	r0, #15
 8000a4c:	f000 f80e 	bl	8000a6c <HAL_InitTick>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	71fb      	strb	r3, [r7, #7]
 8000a5a:	e001      	b.n	8000a60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a5c:	f7ff fedc 	bl	8000818 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a60:	79fb      	ldrb	r3, [r7, #7]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <HAL_InitTick+0x6c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_InitTick+0x70>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_InitTick+0x6c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f941 	bl	8000d1e <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10f      	bne.n	8000ac2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d809      	bhi.n	8000abc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f000 f919 	bl	8000ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_InitTick+0x74>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	e007      	b.n	8000acc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	e004      	b.n	8000acc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	73fb      	strb	r3, [r7, #15]
 8000ac6:	e001      	b.n	8000acc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000018 	.word	0x20000018
 8000adc:	20000010 	.word	0x20000010
 8000ae0:	20000014 	.word	0x20000014

08000ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x20>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_IncTick+0x24>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <HAL_IncTick+0x24>)
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000018 	.word	0x20000018
 8000b08:	200000b0 	.word	0x200000b0

08000b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <HAL_GetTick+0x14>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	200000b0 	.word	0x200000b0

08000b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b2c:	f7ff ffee 	bl	8000b0c <HAL_GetTick>
 8000b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3c:	d005      	beq.n	8000b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_Delay+0x44>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4a:	bf00      	nop
 8000b4c:	f7ff ffde 	bl	8000b0c <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d8f7      	bhi.n	8000b4c <HAL_Delay+0x28>
  {
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000018 	.word	0x20000018

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff8e 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff47 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff5c 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff8e 	bl	8000c24 <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff5d 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ffb0 	bl	8000c8c <SysTick_Config>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d46:	e154      	b.n	8000ff2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	4013      	ands	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 8146 	beq.w	8000fec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d005      	beq.n	8000d78 <HAL_GPIO_Init+0x40>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d130      	bne.n	8000dda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dae:	2201      	movs	r2, #1
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	f003 0201 	and.w	r2, r3, #1
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d017      	beq.n	8000e16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2203      	movs	r2, #3
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d123      	bne.n	8000e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	08da      	lsrs	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3208      	adds	r2, #8
 8000e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	691a      	ldr	r2, [r3, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	08da      	lsrs	r2, r3, #3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3208      	adds	r2, #8
 8000e64:	6939      	ldr	r1, [r7, #16]
 8000e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0203 	and.w	r2, r3, #3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 80a0 	beq.w	8000fec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eac:	4b58      	ldr	r3, [pc, #352]	; (8001010 <HAL_GPIO_Init+0x2d8>)
 8000eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb0:	4a57      	ldr	r2, [pc, #348]	; (8001010 <HAL_GPIO_Init+0x2d8>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb8:	4b55      	ldr	r3, [pc, #340]	; (8001010 <HAL_GPIO_Init+0x2d8>)
 8000eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ec4:	4a53      	ldr	r2, [pc, #332]	; (8001014 <HAL_GPIO_Init+0x2dc>)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	220f      	movs	r2, #15
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eee:	d019      	beq.n	8000f24 <HAL_GPIO_Init+0x1ec>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a49      	ldr	r2, [pc, #292]	; (8001018 <HAL_GPIO_Init+0x2e0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d013      	beq.n	8000f20 <HAL_GPIO_Init+0x1e8>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a48      	ldr	r2, [pc, #288]	; (800101c <HAL_GPIO_Init+0x2e4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d00d      	beq.n	8000f1c <HAL_GPIO_Init+0x1e4>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a47      	ldr	r2, [pc, #284]	; (8001020 <HAL_GPIO_Init+0x2e8>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d007      	beq.n	8000f18 <HAL_GPIO_Init+0x1e0>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a46      	ldr	r2, [pc, #280]	; (8001024 <HAL_GPIO_Init+0x2ec>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d101      	bne.n	8000f14 <HAL_GPIO_Init+0x1dc>
 8000f10:	2304      	movs	r3, #4
 8000f12:	e008      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f14:	2307      	movs	r3, #7
 8000f16:	e006      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e004      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	e002      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f24:	2300      	movs	r3, #0
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	f002 0203 	and.w	r2, r2, #3
 8000f2c:	0092      	lsls	r2, r2, #2
 8000f2e:	4093      	lsls	r3, r2
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f36:	4937      	ldr	r1, [pc, #220]	; (8001014 <HAL_GPIO_Init+0x2dc>)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f44:	4b38      	ldr	r3, [pc, #224]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f68:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f92:	4a25      	ldr	r2, [pc, #148]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f98:	4b23      	ldr	r3, [pc, #140]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fbc:	4a1a      	ldr	r2, [pc, #104]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fe6:	4a10      	ldr	r2, [pc, #64]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f47f aea3 	bne.w	8000d48 <HAL_GPIO_Init+0x10>
  }
}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	371c      	adds	r7, #28
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40021000 	.word	0x40021000
 8001014:	40010000 	.word	0x40010000
 8001018:	48000400 	.word	0x48000400
 800101c:	48000800 	.word	0x48000800
 8001020:	48000c00 	.word	0x48000c00
 8001024:	48001000 	.word	0x48001000
 8001028:	40010400 	.word	0x40010400

0800102c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
 8001038:	4613      	mov	r3, r2
 800103a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800103c:	787b      	ldrb	r3, [r7, #1]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001048:	e002      	b.n	8001050 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e08d      	b.n	800118a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d106      	bne.n	8001088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff fbec 	bl	8000860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2224      	movs	r2, #36	; 0x24
 800108c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0201 	bic.w	r2, r2, #1
 800109e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d107      	bne.n	80010d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	e006      	b.n	80010e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d108      	bne.n	80010fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	e007      	b.n	800110e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800110c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800111c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001120:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001130:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	430a      	orrs	r2, r1
 800114a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69d9      	ldr	r1, [r3, #28]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a1a      	ldr	r2, [r3, #32]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0201 	orr.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2220      	movs	r2, #32
 8001176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b20      	cmp	r3, #32
 80011a6:	d138      	bne.n	800121a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d101      	bne.n	80011b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80011b2:	2302      	movs	r3, #2
 80011b4:	e032      	b.n	800121c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2224      	movs	r2, #36	; 0x24
 80011c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0201 	bic.w	r2, r2, #1
 80011d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6819      	ldr	r1, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 0201 	orr.w	r2, r2, #1
 8001204:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2220      	movs	r2, #32
 800120a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800121a:	2302      	movs	r3, #2
  }
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b20      	cmp	r3, #32
 800123c:	d139      	bne.n	80012b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001248:	2302      	movs	r3, #2
 800124a:	e033      	b.n	80012b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2224      	movs	r2, #36	; 0x24
 8001258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0201 	bic.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800127a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 0201 	orr.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2220      	movs	r2, #32
 80012a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80012b2:	2302      	movs	r3, #2
  }
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40007000 	.word	0x40007000

080012e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40007000 	.word	0x40007000

080012fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800130a:	d130      	bne.n	800136e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001318:	d038      	beq.n	800138c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001322:	4a1e      	ldr	r2, [pc, #120]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001328:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2232      	movs	r2, #50	; 0x32
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	0c9b      	lsrs	r3, r3, #18
 800133c:	3301      	adds	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001340:	e002      	b.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3b01      	subs	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001354:	d102      	bne.n	800135c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f2      	bne.n	8001342 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001368:	d110      	bne.n	800138c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e00f      	b.n	800138e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137a:	d007      	beq.n	800138c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001384:	4a05      	ldr	r2, [pc, #20]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40007000 	.word	0x40007000
 80013a0:	20000010 	.word	0x20000010
 80013a4:	431bde83 	.word	0x431bde83

080013a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d102      	bne.n	80013bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	f000 bc02 	b.w	8001bc0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013bc:	4b96      	ldr	r3, [pc, #600]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 030c 	and.w	r3, r3, #12
 80013c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013c6:	4b94      	ldr	r3, [pc, #592]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0310 	and.w	r3, r3, #16
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80e4 	beq.w	80015a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <HAL_RCC_OscConfig+0x4c>
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2b0c      	cmp	r3, #12
 80013e8:	f040 808b 	bne.w	8001502 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	f040 8087 	bne.w	8001502 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f4:	4b88      	ldr	r3, [pc, #544]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_RCC_OscConfig+0x64>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e3d9      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1a      	ldr	r2, [r3, #32]
 8001410:	4b81      	ldr	r3, [pc, #516]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	d004      	beq.n	8001426 <HAL_RCC_OscConfig+0x7e>
 800141c:	4b7e      	ldr	r3, [pc, #504]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001424:	e005      	b.n	8001432 <HAL_RCC_OscConfig+0x8a>
 8001426:	4b7c      	ldr	r3, [pc, #496]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001432:	4293      	cmp	r3, r2
 8001434:	d223      	bcs.n	800147e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fd54 	bl	8001ee8 <RCC_SetFlashLatencyFromMSIRange>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e3ba      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144a:	4b73      	ldr	r3, [pc, #460]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a72      	ldr	r2, [pc, #456]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b70      	ldr	r3, [pc, #448]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	496d      	ldr	r1, [pc, #436]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001468:	4b6b      	ldr	r3, [pc, #428]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	4968      	ldr	r1, [pc, #416]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
 800147c:	e025      	b.n	80014ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800147e:	4b66      	ldr	r3, [pc, #408]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a65      	ldr	r2, [pc, #404]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b63      	ldr	r3, [pc, #396]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4960      	ldr	r1, [pc, #384]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149c:	4b5e      	ldr	r3, [pc, #376]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	495b      	ldr	r1, [pc, #364]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d109      	bne.n	80014ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fd14 	bl	8001ee8 <RCC_SetFlashLatencyFromMSIRange>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e37a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014ca:	f000 fc81 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 80014ce:	4602      	mov	r2, r0
 80014d0:	4b51      	ldr	r3, [pc, #324]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	091b      	lsrs	r3, r3, #4
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	4950      	ldr	r1, [pc, #320]	; (800161c <HAL_RCC_OscConfig+0x274>)
 80014dc:	5ccb      	ldrb	r3, [r1, r3]
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	fa22 f303 	lsr.w	r3, r2, r3
 80014e6:	4a4e      	ldr	r2, [pc, #312]	; (8001620 <HAL_RCC_OscConfig+0x278>)
 80014e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014ea:	4b4e      	ldr	r3, [pc, #312]	; (8001624 <HAL_RCC_OscConfig+0x27c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fabc 	bl	8000a6c <HAL_InitTick>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d052      	beq.n	80015a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	e35e      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d032      	beq.n	8001570 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800150a:	4b43      	ldr	r3, [pc, #268]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a42      	ldr	r2, [pc, #264]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001516:	f7ff faf9 	bl	8000b0c <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800151e:	f7ff faf5 	bl	8000b0c <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e347      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001530:	4b39      	ldr	r3, [pc, #228]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800153c:	4b36      	ldr	r3, [pc, #216]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a35      	ldr	r2, [pc, #212]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001542:	f043 0308 	orr.w	r3, r3, #8
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b33      	ldr	r3, [pc, #204]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4930      	ldr	r1, [pc, #192]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800155a:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	492b      	ldr	r1, [pc, #172]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800156a:	4313      	orrs	r3, r2
 800156c:	604b      	str	r3, [r1, #4]
 800156e:	e01a      	b.n	80015a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001570:	4b29      	ldr	r3, [pc, #164]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a28      	ldr	r2, [pc, #160]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001576:	f023 0301 	bic.w	r3, r3, #1
 800157a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800157c:	f7ff fac6 	bl	8000b0c <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001584:	f7ff fac2 	bl	8000b0c <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e314      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x1dc>
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d073      	beq.n	800169a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_OscConfig+0x21c>
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b0c      	cmp	r3, #12
 80015bc:	d10e      	bne.n	80015dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d10b      	bne.n	80015dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d063      	beq.n	8001698 <HAL_RCC_OscConfig+0x2f0>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d15f      	bne.n	8001698 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e2f1      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e4:	d106      	bne.n	80015f4 <HAL_RCC_OscConfig+0x24c>
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e025      	b.n	8001640 <HAL_RCC_OscConfig+0x298>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015fc:	d114      	bne.n	8001628 <HAL_RCC_OscConfig+0x280>
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a02      	ldr	r2, [pc, #8]	; (8001618 <HAL_RCC_OscConfig+0x270>)
 8001610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e013      	b.n	8001640 <HAL_RCC_OscConfig+0x298>
 8001618:	40021000 	.word	0x40021000
 800161c:	08002cf8 	.word	0x08002cf8
 8001620:	20000010 	.word	0x20000010
 8001624:	20000014 	.word	0x20000014
 8001628:	4ba0      	ldr	r3, [pc, #640]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a9f      	ldr	r2, [pc, #636]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800162e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b9d      	ldr	r3, [pc, #628]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a9c      	ldr	r2, [pc, #624]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800163a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d013      	beq.n	8001670 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff fa60 	bl	8000b0c <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff fa5c 	bl	8000b0c <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e2ae      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001662:	4b92      	ldr	r3, [pc, #584]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0x2a8>
 800166e:	e014      	b.n	800169a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fa4c 	bl	8000b0c <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fa48 	bl	8000b0c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e29a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168a:	4b88      	ldr	r3, [pc, #544]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x2d0>
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d060      	beq.n	8001768 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_OscConfig+0x310>
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	d119      	bne.n	80016e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d116      	bne.n	80016e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b8:	4b7c      	ldr	r3, [pc, #496]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_OscConfig+0x328>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e277      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d0:	4b76      	ldr	r3, [pc, #472]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	061b      	lsls	r3, r3, #24
 80016de:	4973      	ldr	r1, [pc, #460]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e4:	e040      	b.n	8001768 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d023      	beq.n	8001736 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ee:	4b6f      	ldr	r3, [pc, #444]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a6e      	ldr	r2, [pc, #440]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80016f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fa:	f7ff fa07 	bl	8000b0c <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff fa03 	bl	8000b0c <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e255      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001714:	4b65      	ldr	r3, [pc, #404]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b62      	ldr	r3, [pc, #392]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	495f      	ldr	r1, [pc, #380]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
 8001734:	e018      	b.n	8001768 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001736:	4b5d      	ldr	r3, [pc, #372]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a5c      	ldr	r2, [pc, #368]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800173c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff f9e3 	bl	8000b0c <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff f9df 	bl	8000b0c <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e231      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d03c      	beq.n	80017ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01c      	beq.n	80017b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177c:	4b4b      	ldr	r3, [pc, #300]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800177e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001782:	4a4a      	ldr	r2, [pc, #296]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff f9be 	bl	8000b0c <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff f9ba 	bl	8000b0c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e20c      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80017a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0ef      	beq.n	8001794 <HAL_RCC_OscConfig+0x3ec>
 80017b4:	e01b      	b.n	80017ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b6:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80017b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017bc:	4a3b      	ldr	r2, [pc, #236]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c6:	f7ff f9a1 	bl	8000b0c <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ce:	f7ff f99d 	bl	8000b0c <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e1ef      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e0:	4b32      	ldr	r3, [pc, #200]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80017e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ef      	bne.n	80017ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 80a6 	beq.w	8001948 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001800:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10d      	bne.n	8001828 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	4a26      	ldr	r2, [pc, #152]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001816:	6593      	str	r3, [r2, #88]	; 0x58
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800181a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001824:	2301      	movs	r3, #1
 8001826:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_RCC_OscConfig+0x508>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001830:	2b00      	cmp	r3, #0
 8001832:	d118      	bne.n	8001866 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <HAL_RCC_OscConfig+0x508>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1d      	ldr	r2, [pc, #116]	; (80018b0 <HAL_RCC_OscConfig+0x508>)
 800183a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001840:	f7ff f964 	bl	8000b0c <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001848:	f7ff f960 	bl	8000b0c <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e1b2      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <HAL_RCC_OscConfig+0x508>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d108      	bne.n	8001880 <HAL_RCC_OscConfig+0x4d8>
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800187e:	e029      	b.n	80018d4 <HAL_RCC_OscConfig+0x52c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b05      	cmp	r3, #5
 8001886:	d115      	bne.n	80018b4 <HAL_RCC_OscConfig+0x50c>
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188e:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 800189a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189e:	4a03      	ldr	r2, [pc, #12]	; (80018ac <HAL_RCC_OscConfig+0x504>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a8:	e014      	b.n	80018d4 <HAL_RCC_OscConfig+0x52c>
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40007000 	.word	0x40007000
 80018b4:	4b9a      	ldr	r3, [pc, #616]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 80018b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ba:	4a99      	ldr	r2, [pc, #612]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c4:	4b96      	ldr	r3, [pc, #600]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ca:	4a95      	ldr	r2, [pc, #596]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 80018cc:	f023 0304 	bic.w	r3, r3, #4
 80018d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d016      	beq.n	800190a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018dc:	f7ff f916 	bl	8000b0c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e4:	f7ff f912 	bl	8000b0c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e162      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018fa:	4b89      	ldr	r3, [pc, #548]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0ed      	beq.n	80018e4 <HAL_RCC_OscConfig+0x53c>
 8001908:	e015      	b.n	8001936 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190a:	f7ff f8ff 	bl	8000b0c <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001910:	e00a      	b.n	8001928 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7ff f8fb 	bl	8000b0c <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e14b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001928:	4b7d      	ldr	r3, [pc, #500]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 800192a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1ed      	bne.n	8001912 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001936:	7ffb      	ldrb	r3, [r7, #31]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d105      	bne.n	8001948 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800193c:	4b78      	ldr	r3, [pc, #480]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	4a77      	ldr	r2, [pc, #476]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 8001942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001946:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0320 	and.w	r3, r3, #32
 8001950:	2b00      	cmp	r3, #0
 8001952:	d03c      	beq.n	80019ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	2b00      	cmp	r3, #0
 800195a:	d01c      	beq.n	8001996 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800195c:	4b70      	ldr	r3, [pc, #448]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 800195e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001962:	4a6f      	ldr	r2, [pc, #444]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196c:	f7ff f8ce 	bl	8000b0c <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001974:	f7ff f8ca 	bl	8000b0c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e11c      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001986:	4b66      	ldr	r3, [pc, #408]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 8001988:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0ef      	beq.n	8001974 <HAL_RCC_OscConfig+0x5cc>
 8001994:	e01b      	b.n	80019ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001996:	4b62      	ldr	r3, [pc, #392]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 8001998:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800199c:	4a60      	ldr	r2, [pc, #384]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 800199e:	f023 0301 	bic.w	r3, r3, #1
 80019a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a6:	f7ff f8b1 	bl	8000b0c <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ae:	f7ff f8ad 	bl	8000b0c <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e0ff      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019c0:	4b57      	ldr	r3, [pc, #348]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 80019c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1ef      	bne.n	80019ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 80f3 	beq.w	8001bbe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	2b02      	cmp	r3, #2
 80019de:	f040 80c9 	bne.w	8001b74 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019e2:	4b4f      	ldr	r3, [pc, #316]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 0203 	and.w	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d12c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	3b01      	subs	r3, #1
 8001a02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d123      	bne.n	8001a50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d11b      	bne.n	8001a50 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d113      	bne.n	8001a50 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a32:	085b      	lsrs	r3, r3, #1
 8001a34:	3b01      	subs	r3, #1
 8001a36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d109      	bne.n	8001a50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d06b      	beq.n	8001b28 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d062      	beq.n	8001b1c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a56:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0ac      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a2d      	ldr	r2, [pc, #180]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 8001a6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a72:	f7ff f84b 	bl	8000b0c <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7a:	f7ff f847 	bl	8000b0c <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e099      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8c:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f0      	bne.n	8001a7a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <HAL_RCC_OscConfig+0x77c>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001aa8:	3a01      	subs	r2, #1
 8001aaa:	0112      	lsls	r2, r2, #4
 8001aac:	4311      	orrs	r1, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ab2:	0212      	lsls	r2, r2, #8
 8001ab4:	4311      	orrs	r1, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001aba:	0852      	lsrs	r2, r2, #1
 8001abc:	3a01      	subs	r2, #1
 8001abe:	0552      	lsls	r2, r2, #21
 8001ac0:	4311      	orrs	r1, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ac6:	0852      	lsrs	r2, r2, #1
 8001ac8:	3a01      	subs	r2, #1
 8001aca:	0652      	lsls	r2, r2, #25
 8001acc:	4311      	orrs	r1, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ad2:	06d2      	lsls	r2, r2, #27
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	4912      	ldr	r1, [pc, #72]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0f      	ldr	r2, [pc, #60]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 8001ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 8001aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001af4:	f7ff f80a 	bl	8000b0c <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afc:	f7ff f806 	bl	8000b0c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e058      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <HAL_RCC_OscConfig+0x778>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b1a:	e050      	b.n	8001bbe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e04f      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
 8001b20:	40021000 	.word	0x40021000
 8001b24:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b28:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_RCC_OscConfig+0x820>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d144      	bne.n	8001bbe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b34:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <HAL_RCC_OscConfig+0x820>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <HAL_RCC_OscConfig+0x820>)
 8001b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <HAL_RCC_OscConfig+0x820>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4a20      	ldr	r2, [pc, #128]	; (8001bc8 <HAL_RCC_OscConfig+0x820>)
 8001b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b4c:	f7fe ffde 	bl	8000b0c <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7fe ffda 	bl	8000b0c <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e02c      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_RCC_OscConfig+0x820>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x7ac>
 8001b72:	e024      	b.n	8001bbe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d01f      	beq.n	8001bba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <HAL_RCC_OscConfig+0x820>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <HAL_RCC_OscConfig+0x820>)
 8001b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7fe ffc1 	bl	8000b0c <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7fe ffbd 	bl	8000b0c <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e00f      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_OscConfig+0x820>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_OscConfig+0x820>)
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	4905      	ldr	r1, [pc, #20]	; (8001bc8 <HAL_RCC_OscConfig+0x820>)
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_RCC_OscConfig+0x824>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60cb      	str	r3, [r1, #12]
 8001bb8:	e001      	b.n	8001bbe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3720      	adds	r7, #32
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	feeefffc 	.word	0xfeeefffc

08001bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0e7      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001be4:	4b75      	ldr	r3, [pc, #468]	; (8001dbc <HAL_RCC_ClockConfig+0x1ec>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d910      	bls.n	8001c14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b72      	ldr	r3, [pc, #456]	; (8001dbc <HAL_RCC_ClockConfig+0x1ec>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 0207 	bic.w	r2, r3, #7
 8001bfa:	4970      	ldr	r1, [pc, #448]	; (8001dbc <HAL_RCC_ClockConfig+0x1ec>)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	4b6e      	ldr	r3, [pc, #440]	; (8001dbc <HAL_RCC_ClockConfig+0x1ec>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0cf      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d010      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	4b66      	ldr	r3, [pc, #408]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d908      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c30:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4960      	ldr	r1, [pc, #384]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d04c      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c56:	4b5a      	ldr	r3, [pc, #360]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d121      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0a6      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6e:	4b54      	ldr	r3, [pc, #336]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d115      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e09a      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c86:	4b4e      	ldr	r3, [pc, #312]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e08e      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c96:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e086      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ca6:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f023 0203 	bic.w	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4943      	ldr	r1, [pc, #268]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cb8:	f7fe ff28 	bl	8000b0c <HAL_GetTick>
 8001cbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc0:	f7fe ff24 	bl	8000b0c <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e06e      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	4b3a      	ldr	r3, [pc, #232]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 020c 	and.w	r2, r3, #12
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1eb      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d010      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d208      	bcs.n	8001d16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d04:	4b2e      	ldr	r3, [pc, #184]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	492b      	ldr	r1, [pc, #172]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d16:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <HAL_RCC_ClockConfig+0x1ec>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d210      	bcs.n	8001d46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_RCC_ClockConfig+0x1ec>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 0207 	bic.w	r2, r3, #7
 8001d2c:	4923      	ldr	r1, [pc, #140]	; (8001dbc <HAL_RCC_ClockConfig+0x1ec>)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_RCC_ClockConfig+0x1ec>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e036      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d008      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d52:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	4918      	ldr	r1, [pc, #96]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d009      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4910      	ldr	r1, [pc, #64]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d84:	f000 f824 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	490b      	ldr	r1, [pc, #44]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f4>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001da0:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001da2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1fc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fe5f 	bl	8000a6c <HAL_InitTick>
 8001dae:	4603      	mov	r3, r0
 8001db0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001db2:	7afb      	ldrb	r3, [r7, #11]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08002cf8 	.word	0x08002cf8
 8001dc8:	20000010 	.word	0x20000010
 8001dcc:	20000014 	.word	0x20000014

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dde:	4b3e      	ldr	r3, [pc, #248]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de8:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x34>
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d121      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d11e      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e04:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e10:	4b31      	ldr	r3, [pc, #196]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	e005      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e20:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e2c:	4a2b      	ldr	r2, [pc, #172]	; (8001edc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10d      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d102      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e48:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	e004      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e54:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d134      	bne.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d003      	beq.n	8001e76 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d003      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0xac>
 8001e74:	e005      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e78:	617b      	str	r3, [r7, #20]
      break;
 8001e7a:	e005      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e7e:	617b      	str	r3, [r7, #20]
      break;
 8001e80:	e002      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	617b      	str	r3, [r7, #20]
      break;
 8001e86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	3301      	adds	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	fb03 f202 	mul.w	r2, r3, r2
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	0e5b      	lsrs	r3, r3, #25
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ec8:	69bb      	ldr	r3, [r7, #24]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	08002d08 	.word	0x08002d08
 8001ee0:	00f42400 	.word	0x00f42400
 8001ee4:	007a1200 	.word	0x007a1200

08001ee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f00:	f7ff f9ee 	bl	80012e0 <HAL_PWREx_GetVoltageRange>
 8001f04:	6178      	str	r0, [r7, #20]
 8001f06:	e014      	b.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f12:	6593      	str	r3, [r2, #88]	; 0x58
 8001f14:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f20:	f7ff f9de 	bl	80012e0 <HAL_PWREx_GetVoltageRange>
 8001f24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2a:	4a1d      	ldr	r2, [pc, #116]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f38:	d10b      	bne.n	8001f52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b80      	cmp	r3, #128	; 0x80
 8001f3e:	d919      	bls.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2ba0      	cmp	r3, #160	; 0xa0
 8001f44:	d902      	bls.n	8001f4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f46:	2302      	movs	r3, #2
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	e013      	b.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	e010      	b.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b80      	cmp	r3, #128	; 0x80
 8001f56:	d902      	bls.n	8001f5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f58:	2303      	movs	r3, #3
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	e00a      	b.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b80      	cmp	r3, #128	; 0x80
 8001f62:	d102      	bne.n	8001f6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f64:	2302      	movs	r3, #2
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	e004      	b.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b70      	cmp	r3, #112	; 0x70
 8001f6e:	d101      	bne.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f70:	2301      	movs	r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 0207 	bic.w	r2, r3, #7
 8001f7c:	4909      	ldr	r1, [pc, #36]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d001      	beq.n	8001f96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40022000 	.word	0x40022000

08001fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d031      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fcc:	d01a      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001fce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fd2:	d814      	bhi.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d009      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fdc:	d10f      	bne.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001fde:	4b5d      	ldr	r3, [pc, #372]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	4a5c      	ldr	r2, [pc, #368]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fea:	e00c      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fa00 	bl	80023f8 <RCCEx_PLLSAI1_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ffc:	e003      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	74fb      	strb	r3, [r7, #19]
      break;
 8002002:	e000      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002006:	7cfb      	ldrb	r3, [r7, #19]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10b      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800200c:	4b51      	ldr	r3, [pc, #324]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	494e      	ldr	r1, [pc, #312]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002022:	e001      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 809e 	beq.w	8002172 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800203a:	4b46      	ldr	r3, [pc, #280]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800204a:	2300      	movs	r3, #0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00d      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002050:	4b40      	ldr	r3, [pc, #256]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	4a3f      	ldr	r2, [pc, #252]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205a:	6593      	str	r3, [r2, #88]	; 0x58
 800205c:	4b3d      	ldr	r3, [pc, #244]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002068:	2301      	movs	r3, #1
 800206a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800206c:	4b3a      	ldr	r3, [pc, #232]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a39      	ldr	r2, [pc, #228]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002076:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002078:	f7fe fd48 	bl	8000b0c <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800207e:	e009      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002080:	f7fe fd44 	bl	8000b0c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d902      	bls.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	74fb      	strb	r3, [r7, #19]
        break;
 8002092:	e005      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002094:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0ef      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d15a      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020a6:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01e      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d019      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020c2:	4b24      	ldr	r3, [pc, #144]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020ce:	4b21      	ldr	r3, [pc, #132]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	4a1f      	ldr	r2, [pc, #124]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020ee:	4a19      	ldr	r2, [pc, #100]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d016      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7fe fd04 	bl	8000b0c <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002106:	e00b      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002108:	f7fe fd00 	bl	8000b0c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	; 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d902      	bls.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	74fb      	strb	r3, [r7, #19]
            break;
 800211e:	e006      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0ec      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800212e:	7cfb      	ldrb	r3, [r7, #19]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10b      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	4904      	ldr	r1, [pc, #16]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800214a:	e009      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800214c:	7cfb      	ldrb	r3, [r7, #19]
 800214e:	74bb      	strb	r3, [r7, #18]
 8002150:	e006      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002160:	7c7b      	ldrb	r3, [r7, #17]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d105      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002166:	4b9b      	ldr	r3, [pc, #620]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	4a9a      	ldr	r2, [pc, #616]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800216c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002170:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800217e:	4b95      	ldr	r3, [pc, #596]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002184:	f023 0203 	bic.w	r2, r3, #3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4991      	ldr	r1, [pc, #580]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021a0:	4b8c      	ldr	r3, [pc, #560]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	f023 020c 	bic.w	r2, r3, #12
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	4989      	ldr	r1, [pc, #548]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021c2:	4b84      	ldr	r3, [pc, #528]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d0:	4980      	ldr	r1, [pc, #512]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021e4:	4b7b      	ldr	r3, [pc, #492]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	4978      	ldr	r1, [pc, #480]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002206:	4b73      	ldr	r3, [pc, #460]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002214:	496f      	ldr	r1, [pc, #444]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002228:	4b6a      	ldr	r3, [pc, #424]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4967      	ldr	r1, [pc, #412]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800224a:	4b62      	ldr	r3, [pc, #392]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800224c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002250:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	495e      	ldr	r1, [pc, #376]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800226c:	4b59      	ldr	r3, [pc, #356]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227a:	4956      	ldr	r1, [pc, #344]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800228e:	4b51      	ldr	r3, [pc, #324]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002294:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229c:	494d      	ldr	r1, [pc, #308]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d028      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022b0:	4b48      	ldr	r3, [pc, #288]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022be:	4945      	ldr	r1, [pc, #276]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ce:	d106      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d0:	4b40      	ldr	r3, [pc, #256]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a3f      	ldr	r2, [pc, #252]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80022d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022da:	60d3      	str	r3, [r2, #12]
 80022dc:	e011      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022e6:	d10c      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3304      	adds	r3, #4
 80022ec:	2101      	movs	r1, #1
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f882 	bl	80023f8 <RCCEx_PLLSAI1_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022f8:	7cfb      	ldrb	r3, [r7, #19]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d028      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800230e:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002314:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231c:	492d      	ldr	r1, [pc, #180]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800232c:	d106      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800232e:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	4a28      	ldr	r2, [pc, #160]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002338:	60d3      	str	r3, [r2, #12]
 800233a:	e011      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002340:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002344:	d10c      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3304      	adds	r3, #4
 800234a:	2101      	movs	r1, #1
 800234c:	4618      	mov	r0, r3
 800234e:	f000 f853 	bl	80023f8 <RCCEx_PLLSAI1_Config>
 8002352:	4603      	mov	r3, r0
 8002354:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002356:	7cfb      	ldrb	r3, [r7, #19]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800235c:	7cfb      	ldrb	r3, [r7, #19]
 800235e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01c      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800237a:	4916      	ldr	r1, [pc, #88]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800238a:	d10c      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3304      	adds	r3, #4
 8002390:	2102      	movs	r1, #2
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f830 	bl	80023f8 <RCCEx_PLLSAI1_Config>
 8002398:	4603      	mov	r3, r0
 800239a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80023a2:	7cfb      	ldrb	r3, [r7, #19]
 80023a4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00a      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80023b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	4904      	ldr	r1, [pc, #16]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000

080023d8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	6013      	str	r3, [r2, #0]
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000

080023f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002406:	4b74      	ldr	r3, [pc, #464]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d018      	beq.n	8002444 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002412:	4b71      	ldr	r3, [pc, #452]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0203 	and.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d10d      	bne.n	800243e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
       ||
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800242a:	4b6b      	ldr	r3, [pc, #428]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
       ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d047      	beq.n	80024ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
 8002442:	e044      	b.n	80024ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d018      	beq.n	800247e <RCCEx_PLLSAI1_Config+0x86>
 800244c:	2b03      	cmp	r3, #3
 800244e:	d825      	bhi.n	800249c <RCCEx_PLLSAI1_Config+0xa4>
 8002450:	2b01      	cmp	r3, #1
 8002452:	d002      	beq.n	800245a <RCCEx_PLLSAI1_Config+0x62>
 8002454:	2b02      	cmp	r3, #2
 8002456:	d009      	beq.n	800246c <RCCEx_PLLSAI1_Config+0x74>
 8002458:	e020      	b.n	800249c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800245a:	4b5f      	ldr	r3, [pc, #380]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11d      	bne.n	80024a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800246a:	e01a      	b.n	80024a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800246c:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d116      	bne.n	80024a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247c:	e013      	b.n	80024a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800247e:	4b56      	ldr	r3, [pc, #344]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10f      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800248a:	4b53      	ldr	r3, [pc, #332]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800249a:	e006      	b.n	80024aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
      break;
 80024a0:	e004      	b.n	80024ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024a2:	bf00      	nop
 80024a4:	e002      	b.n	80024ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024a6:	bf00      	nop
 80024a8:	e000      	b.n	80024ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10d      	bne.n	80024ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024b2:	4b49      	ldr	r3, [pc, #292]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6819      	ldr	r1, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	430b      	orrs	r3, r1
 80024c8:	4943      	ldr	r1, [pc, #268]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d17c      	bne.n	80025ce <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024d4:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a3f      	ldr	r2, [pc, #252]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e0:	f7fe fb14 	bl	8000b0c <HAL_GetTick>
 80024e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024e6:	e009      	b.n	80024fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024e8:	f7fe fb10 	bl	8000b0c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d902      	bls.n	80024fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	73fb      	strb	r3, [r7, #15]
        break;
 80024fa:	e005      	b.n	8002508 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024fc:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ef      	bne.n	80024e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d15f      	bne.n	80025ce <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d110      	bne.n	8002536 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002514:	4b30      	ldr	r3, [pc, #192]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800251c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6892      	ldr	r2, [r2, #8]
 8002524:	0211      	lsls	r1, r2, #8
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68d2      	ldr	r2, [r2, #12]
 800252a:	06d2      	lsls	r2, r2, #27
 800252c:	430a      	orrs	r2, r1
 800252e:	492a      	ldr	r1, [pc, #168]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002530:	4313      	orrs	r3, r2
 8002532:	610b      	str	r3, [r1, #16]
 8002534:	e027      	b.n	8002586 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d112      	bne.n	8002562 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800253c:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002544:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6892      	ldr	r2, [r2, #8]
 800254c:	0211      	lsls	r1, r2, #8
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6912      	ldr	r2, [r2, #16]
 8002552:	0852      	lsrs	r2, r2, #1
 8002554:	3a01      	subs	r2, #1
 8002556:	0552      	lsls	r2, r2, #21
 8002558:	430a      	orrs	r2, r1
 800255a:	491f      	ldr	r1, [pc, #124]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800255c:	4313      	orrs	r3, r2
 800255e:	610b      	str	r3, [r1, #16]
 8002560:	e011      	b.n	8002586 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002562:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800256a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6892      	ldr	r2, [r2, #8]
 8002572:	0211      	lsls	r1, r2, #8
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6952      	ldr	r2, [r2, #20]
 8002578:	0852      	lsrs	r2, r2, #1
 800257a:	3a01      	subs	r2, #1
 800257c:	0652      	lsls	r2, r2, #25
 800257e:	430a      	orrs	r2, r1
 8002580:	4915      	ldr	r1, [pc, #84]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002582:	4313      	orrs	r3, r2
 8002584:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002586:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a13      	ldr	r2, [pc, #76]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800258c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002590:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002592:	f7fe fabb 	bl	8000b0c <HAL_GetTick>
 8002596:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002598:	e009      	b.n	80025ae <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800259a:	f7fe fab7 	bl	8000b0c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d902      	bls.n	80025ae <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	73fb      	strb	r3, [r7, #15]
          break;
 80025ac:	e005      	b.n	80025ba <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0ef      	beq.n	800259a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d106      	bne.n	80025ce <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	4903      	ldr	r1, [pc, #12]	; (80025d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40021000 	.word	0x40021000

080025dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d079      	beq.n	80026e2 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe f984 	bl	8000910 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b10      	cmp	r3, #16
 800261c:	d058      	beq.n	80026d0 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	22ca      	movs	r2, #202	; 0xca
 8002624:	625a      	str	r2, [r3, #36]	; 0x24
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2253      	movs	r2, #83	; 0x53
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fa4e 	bl	8002ad0 <RTC_EnterInitMode>
 8002634:	4603      	mov	r3, r0
 8002636:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d127      	bne.n	800268e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800264c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002650:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6899      	ldr	r1, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	68d2      	ldr	r2, [r2, #12]
 8002678:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6919      	ldr	r1, [r3, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	041a      	lsls	r2, r3, #16
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fa52 	bl	8002b38 <RTC_ExitInitMode>
 8002694:	4603      	mov	r3, r0
 8002696:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d113      	bne.n	80026c6 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0203 	bic.w	r2, r2, #3
 80026ac:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	22ff      	movs	r2, #255	; 0xff
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24
 80026ce:	e001      	b.n	80026d4 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d103      	bne.n	80026e2 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_RTC_SetTime+0x1a>
 8002702:	2302      	movs	r3, #2
 8002704:	e08b      	b.n	800281e <HAL_RTC_SetTime+0x132>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2202      	movs	r2, #2
 8002712:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	22ca      	movs	r2, #202	; 0xca
 800271c:	625a      	str	r2, [r3, #36]	; 0x24
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2253      	movs	r2, #83	; 0x53
 8002724:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 f9d2 	bl	8002ad0 <RTC_EnterInitMode>
 800272c:	4603      	mov	r3, r0
 800272e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d163      	bne.n	80027fe <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d126      	bne.n	800278a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d102      	bne.n	8002750 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2200      	movs	r2, #0
 800274e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fa2d 	bl	8002bb4 <RTC_ByteToBcd2>
 800275a:	4603      	mov	r3, r0
 800275c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	785b      	ldrb	r3, [r3, #1]
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fa26 	bl	8002bb4 <RTC_ByteToBcd2>
 8002768:	4603      	mov	r3, r0
 800276a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800276c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	789b      	ldrb	r3, [r3, #2]
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fa1e 	bl	8002bb4 <RTC_ByteToBcd2>
 8002778:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800277a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	78db      	ldrb	r3, [r3, #3]
 8002782:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	e018      	b.n	80027bc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2200      	movs	r2, #0
 800279c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	785b      	ldrb	r3, [r3, #1]
 80027a8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80027aa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80027b0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	78db      	ldrb	r3, [r3, #3]
 80027b6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80027b8:	4313      	orrs	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80027c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80027ca:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6899      	ldr	r1, [r3, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f99f 	bl	8002b38 <RTC_ExitInitMode>
 80027fa:	4603      	mov	r3, r0
 80027fc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	22ff      	movs	r2, #255	; 0xff
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002806:	7cfb      	ldrb	r3, [r7, #19]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800281c:	7cfb      	ldrb	r3, [r7, #19]
}
 800281e:	4618      	mov	r0, r3
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	bd90      	pop	{r4, r7, pc}

08002826 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002854:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002858:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	0c1b      	lsrs	r3, r3, #16
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002864:	b2da      	uxtb	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002874:	b2da      	uxtb	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002882:	b2da      	uxtb	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	0d9b      	lsrs	r3, r3, #22
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	b2da      	uxtb	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d11a      	bne.n	80028d4 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f9a6 	bl	8002bf4 <RTC_Bcd2ToByte>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	785b      	ldrb	r3, [r3, #1]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 f99d 	bl	8002bf4 <RTC_Bcd2ToByte>
 80028ba:	4603      	mov	r3, r0
 80028bc:	461a      	mov	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	789b      	ldrb	r3, [r3, #2]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 f994 	bl	8002bf4 <RTC_Bcd2ToByte>
 80028cc:	4603      	mov	r3, r0
 80028ce:	461a      	mov	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80028de:	b590      	push	{r4, r7, lr}
 80028e0:	b087      	sub	sp, #28
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_RTC_SetDate+0x1a>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e075      	b.n	80029e4 <HAL_RTC_SetDate+0x106>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10e      	bne.n	800292c <HAL_RTC_SetDate+0x4e>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	785b      	ldrb	r3, [r3, #1]
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	785b      	ldrb	r3, [r3, #1]
 800291e:	f023 0310 	bic.w	r3, r3, #16
 8002922:	b2db      	uxtb	r3, r3
 8002924:	330a      	adds	r3, #10
 8002926:	b2da      	uxtb	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d11c      	bne.n	800296c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	78db      	ldrb	r3, [r3, #3]
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f93c 	bl	8002bb4 <RTC_ByteToBcd2>
 800293c:	4603      	mov	r3, r0
 800293e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	785b      	ldrb	r3, [r3, #1]
 8002944:	4618      	mov	r0, r3
 8002946:	f000 f935 	bl	8002bb4 <RTC_ByteToBcd2>
 800294a:	4603      	mov	r3, r0
 800294c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800294e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	789b      	ldrb	r3, [r3, #2]
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f92d 	bl	8002bb4 <RTC_ByteToBcd2>
 800295a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800295c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e00e      	b.n	800298a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	78db      	ldrb	r3, [r3, #3]
 8002970:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	785b      	ldrb	r3, [r3, #1]
 8002976:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002978:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800297e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	22ca      	movs	r2, #202	; 0xca
 8002990:	625a      	str	r2, [r3, #36]	; 0x24
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2253      	movs	r2, #83	; 0x53
 8002998:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f898 	bl	8002ad0 <RTC_EnterInitMode>
 80029a0:	4603      	mov	r3, r0
 80029a2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10c      	bne.n	80029c4 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80029b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80029b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f8bc 	bl	8002b38 <RTC_ExitInitMode>
 80029c0:	4603      	mov	r3, r0
 80029c2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	22ff      	movs	r2, #255	; 0xff
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d103      	bne.n	80029da <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80029e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd90      	pop	{r4, r7, pc}

080029ec <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a06:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	0c1b      	lsrs	r3, r3, #16
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	0b5b      	lsrs	r3, r3, #13
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d11a      	bne.n	8002a7c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	78db      	ldrb	r3, [r3, #3]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f8d2 	bl	8002bf4 <RTC_Bcd2ToByte>
 8002a50:	4603      	mov	r3, r0
 8002a52:	461a      	mov	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	785b      	ldrb	r3, [r3, #1]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 f8c9 	bl	8002bf4 <RTC_Bcd2ToByte>
 8002a62:	4603      	mov	r3, r0
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	789b      	ldrb	r3, [r3, #2]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f8c0 	bl	8002bf4 <RTC_Bcd2ToByte>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0d      	ldr	r2, [pc, #52]	; (8002acc <HAL_RTC_WaitForSynchro+0x44>)
 8002a96:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002a98:	f7fe f838 	bl	8000b0c <HAL_GetTick>
 8002a9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a9e:	e009      	b.n	8002ab4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002aa0:	f7fe f834 	bl	8000b0c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aae:	d901      	bls.n	8002ab4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e007      	b.n	8002ac4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0ee      	beq.n	8002aa0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	0003ff5f 	.word	0x0003ff5f

08002ad0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d120      	bne.n	8002b2c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f04f 32ff 	mov.w	r2, #4294967295
 8002af2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002af4:	f7fe f80a 	bl	8000b0c <HAL_GetTick>
 8002af8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002afa:	e00d      	b.n	8002b18 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002afc:	f7fe f806 	bl	8000b0c <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b0a:	d905      	bls.n	8002b18 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2203      	movs	r2, #3
 8002b14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d102      	bne.n	8002b2c <RTC_EnterInitMode+0x5c>
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d1e7      	bne.n	8002afc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002b44:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <RTC_ExitInitMode+0x78>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4a19      	ldr	r2, [pc, #100]	; (8002bb0 <RTC_ExitInitMode+0x78>)
 8002b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b4e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002b50:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <RTC_ExitInitMode+0x78>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10c      	bne.n	8002b76 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ff93 	bl	8002a88 <HAL_RTC_WaitForSynchro>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01e      	beq.n	8002ba6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	73fb      	strb	r3, [r7, #15]
 8002b74:	e017      	b.n	8002ba6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <RTC_ExitInitMode+0x78>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	4a0d      	ldr	r2, [pc, #52]	; (8002bb0 <RTC_ExitInitMode+0x78>)
 8002b7c:	f023 0320 	bic.w	r3, r3, #32
 8002b80:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ff80 	bl	8002a88 <HAL_RTC_WaitForSynchro>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2203      	movs	r2, #3
 8002b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <RTC_ExitInitMode+0x78>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <RTC_ExitInitMode+0x78>)
 8002ba0:	f043 0320 	orr.w	r3, r3, #32
 8002ba4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40002800 	.word	0x40002800

08002bb4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002bc6:	e005      	b.n	8002bd4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8002bce:	7afb      	ldrb	r3, [r7, #11]
 8002bd0:	3b0a      	subs	r3, #10
 8002bd2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8002bd4:	7afb      	ldrb	r3, [r7, #11]
 8002bd6:	2b09      	cmp	r3, #9
 8002bd8:	d8f6      	bhi.n	8002bc8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	7afb      	ldrb	r3, [r7, #11]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	b2db      	uxtb	r3, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	0092      	lsls	r2, r2, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	4413      	add	r3, r2
 8002c1a:	b2db      	uxtb	r3, r3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3350      	adds	r3, #80	; 0x50
 8002c3a:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	009a      	lsls	r2, r3, #2
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	4413      	add	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6013      	str	r3, [r2, #0]
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b085      	sub	sp, #20
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3350      	adds	r3, #80	; 0x50
 8002c6a:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <memset>:
 8002c86:	4402      	add	r2, r0
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d100      	bne.n	8002c90 <memset+0xa>
 8002c8e:	4770      	bx	lr
 8002c90:	f803 1b01 	strb.w	r1, [r3], #1
 8002c94:	e7f9      	b.n	8002c8a <memset+0x4>
	...

08002c98 <__libc_init_array>:
 8002c98:	b570      	push	{r4, r5, r6, lr}
 8002c9a:	4d0d      	ldr	r5, [pc, #52]	; (8002cd0 <__libc_init_array+0x38>)
 8002c9c:	4c0d      	ldr	r4, [pc, #52]	; (8002cd4 <__libc_init_array+0x3c>)
 8002c9e:	1b64      	subs	r4, r4, r5
 8002ca0:	10a4      	asrs	r4, r4, #2
 8002ca2:	2600      	movs	r6, #0
 8002ca4:	42a6      	cmp	r6, r4
 8002ca6:	d109      	bne.n	8002cbc <__libc_init_array+0x24>
 8002ca8:	4d0b      	ldr	r5, [pc, #44]	; (8002cd8 <__libc_init_array+0x40>)
 8002caa:	4c0c      	ldr	r4, [pc, #48]	; (8002cdc <__libc_init_array+0x44>)
 8002cac:	f000 f818 	bl	8002ce0 <_init>
 8002cb0:	1b64      	subs	r4, r4, r5
 8002cb2:	10a4      	asrs	r4, r4, #2
 8002cb4:	2600      	movs	r6, #0
 8002cb6:	42a6      	cmp	r6, r4
 8002cb8:	d105      	bne.n	8002cc6 <__libc_init_array+0x2e>
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
 8002cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc0:	4798      	blx	r3
 8002cc2:	3601      	adds	r6, #1
 8002cc4:	e7ee      	b.n	8002ca4 <__libc_init_array+0xc>
 8002cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cca:	4798      	blx	r3
 8002ccc:	3601      	adds	r6, #1
 8002cce:	e7f2      	b.n	8002cb6 <__libc_init_array+0x1e>
 8002cd0:	08002d38 	.word	0x08002d38
 8002cd4:	08002d38 	.word	0x08002d38
 8002cd8:	08002d38 	.word	0x08002d38
 8002cdc:	08002d3c 	.word	0x08002d3c

08002ce0 <_init>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	bf00      	nop
 8002ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce6:	bc08      	pop	{r3}
 8002ce8:	469e      	mov	lr, r3
 8002cea:	4770      	bx	lr

08002cec <_fini>:
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cee:	bf00      	nop
 8002cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf2:	bc08      	pop	{r3}
 8002cf4:	469e      	mov	lr, r3
 8002cf6:	4770      	bx	lr

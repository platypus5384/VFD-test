
VFD-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ad4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002c60  08002c60  00012c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ca0  08002ca0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ca0  08002ca0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ca0  08002ca0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ca0  08002ca0  00012ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ca4  08002ca4  00012ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000001c  08002cc4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002cc4  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bcaf  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001efb  00000000  00000000  0002bd3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  0002dc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000940  00000000  00000000  0002e860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000206d3  00000000  00000000  0002f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e6fc  00000000  00000000  0004f873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c45cd  00000000  00000000  0005df6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003130  00000000  00000000  0012253c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0012566c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000001c 	.word	0x2000001c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002c48 	.word	0x08002c48

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000020 	.word	0x20000020
 80001c8:	08002c48 	.word	0x08002c48

080001cc <litBit>:
		0x39, // C: 0111001
		0x5E, // D: 1011110
		0x79, // E: 1111001
		0x71  // F: 1110001
};
void litBit(uint8_t data){
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	f003 0301 	and.w	r3, r3, #1
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	461a      	mov	r2, r3
 80001e0:	2101      	movs	r1, #1
 80001e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001e6:	f000 fed5 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	105b      	asrs	r3, r3, #1
 80001ee:	b2db      	uxtb	r3, r3
 80001f0:	f003 0301 	and.w	r3, r3, #1
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	461a      	mov	r2, r3
 80001f8:	2102      	movs	r1, #2
 80001fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001fe:	f000 fec9 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	109b      	asrs	r3, r3, #2
 8000206:	b2db      	uxtb	r3, r3
 8000208:	f003 0301 	and.w	r3, r3, #1
 800020c:	b2db      	uxtb	r3, r3
 800020e:	461a      	mov	r2, r3
 8000210:	2104      	movs	r1, #4
 8000212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000216:	f000 febd 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	10db      	asrs	r3, r3, #3
 800021e:	b2db      	uxtb	r3, r3
 8000220:	f003 0301 	and.w	r3, r3, #1
 8000224:	b2db      	uxtb	r3, r3
 8000226:	461a      	mov	r2, r3
 8000228:	2108      	movs	r1, #8
 800022a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022e:	f000 feb1 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	111b      	asrs	r3, r3, #4
 8000236:	b2db      	uxtb	r3, r3
 8000238:	f003 0301 	and.w	r3, r3, #1
 800023c:	b2db      	uxtb	r3, r3
 800023e:	461a      	mov	r2, r3
 8000240:	2110      	movs	r1, #16
 8000242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000246:	f000 fea5 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	115b      	asrs	r3, r3, #5
 800024e:	b2db      	uxtb	r3, r3
 8000250:	f003 0301 	and.w	r3, r3, #1
 8000254:	b2db      	uxtb	r3, r3
 8000256:	461a      	mov	r2, r3
 8000258:	2120      	movs	r1, #32
 800025a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025e:	f000 fe99 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	119b      	asrs	r3, r3, #6
 8000266:	b2db      	uxtb	r3, r3
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	b2db      	uxtb	r3, r3
 800026e:	461a      	mov	r2, r3
 8000270:	2140      	movs	r1, #64	; 0x40
 8000272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000276:	f000 fe8d 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_DP_GPIO_Port, SEG_DP_Pin, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	09db      	lsrs	r3, r3, #7
 800027e:	b2db      	uxtb	r3, r3
 8000280:	461a      	mov	r2, r3
 8000282:	2180      	movs	r1, #128	; 0x80
 8000284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000288:	f000 fe84 	bl	8000f94 <HAL_GPIO_WritePin>
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <displayNumber>:

void displayNumber(uint8_t number){
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
	if (0 <= number && number <= 0x0F){
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	2b0f      	cmp	r3, #15
 80002a2:	d805      	bhi.n	80002b0 <displayNumber+0x1c>
		litBit(segmentPatterns[number]);
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <displayNumber+0x24>)
 80002a8:	5cd3      	ldrb	r3, [r2, r3]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ff8e 	bl	80001cc <litBit>
	}
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000000 	.word	0x20000000

080002bc <enableDigit>:

void enableDigit(uint8_t digit){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
	switch(digit){
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	2b05      	cmp	r3, #5
 80002ca:	d835      	bhi.n	8000338 <enableDigit+0x7c>
 80002cc:	a201      	add	r2, pc, #4	; (adr r2, 80002d4 <enableDigit+0x18>)
 80002ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d2:	bf00      	nop
 80002d4:	080002ed 	.word	0x080002ed
 80002d8:	080002fb 	.word	0x080002fb
 80002dc:	08000309 	.word	0x08000309
 80002e0:	08000315 	.word	0x08000315
 80002e4:	08000321 	.word	0x08000321
 80002e8:	0800032d 	.word	0x0800032d
	case 0:
		HAL_GPIO_WritePin(GRID1_GPIO_Port, GRID1_Pin, GPIO_PIN_SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f2:	4813      	ldr	r0, [pc, #76]	; (8000340 <enableDigit+0x84>)
 80002f4:	f000 fe4e 	bl	8000f94 <HAL_GPIO_WritePin>
		break;
 80002f8:	e01e      	b.n	8000338 <enableDigit+0x7c>
	case 1:
		HAL_GPIO_WritePin(GRID2_GPIO_Port, GRID2_Pin, GPIO_PIN_SET);
 80002fa:	2201      	movs	r2, #1
 80002fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000300:	480f      	ldr	r0, [pc, #60]	; (8000340 <enableDigit+0x84>)
 8000302:	f000 fe47 	bl	8000f94 <HAL_GPIO_WritePin>
		break;
 8000306:	e017      	b.n	8000338 <enableDigit+0x7c>
	case 2:
		HAL_GPIO_WritePin(GRID3_GPIO_Port, GRID3_Pin, GPIO_PIN_SET);
 8000308:	2201      	movs	r2, #1
 800030a:	2180      	movs	r1, #128	; 0x80
 800030c:	480c      	ldr	r0, [pc, #48]	; (8000340 <enableDigit+0x84>)
 800030e:	f000 fe41 	bl	8000f94 <HAL_GPIO_WritePin>
		break;
 8000312:	e011      	b.n	8000338 <enableDigit+0x7c>
	case 3:
		HAL_GPIO_WritePin(GRID4_GPIO_Port, GRID4_Pin, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	2140      	movs	r1, #64	; 0x40
 8000318:	4809      	ldr	r0, [pc, #36]	; (8000340 <enableDigit+0x84>)
 800031a:	f000 fe3b 	bl	8000f94 <HAL_GPIO_WritePin>
		break;
 800031e:	e00b      	b.n	8000338 <enableDigit+0x7c>
	case 4:
		HAL_GPIO_WritePin(GRID5_GPIO_Port, GRID5_Pin, GPIO_PIN_SET);
 8000320:	2201      	movs	r2, #1
 8000322:	2120      	movs	r1, #32
 8000324:	4806      	ldr	r0, [pc, #24]	; (8000340 <enableDigit+0x84>)
 8000326:	f000 fe35 	bl	8000f94 <HAL_GPIO_WritePin>
		break;
 800032a:	e005      	b.n	8000338 <enableDigit+0x7c>
	case 5:
		HAL_GPIO_WritePin(GRID6_GPIO_Port, GRID6_Pin, GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	2110      	movs	r1, #16
 8000330:	4803      	ldr	r0, [pc, #12]	; (8000340 <enableDigit+0x84>)
 8000332:	f000 fe2f 	bl	8000f94 <HAL_GPIO_WritePin>
		break;
 8000336:	bf00      	nop
	}
}
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	48000400 	.word	0x48000400

08000344 <disableAllDigit>:

void disableAllDigit(){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GRID1_GPIO_Port, GRID1_Pin, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034e:	480f      	ldr	r0, [pc, #60]	; (800038c <disableAllDigit+0x48>)
 8000350:	f000 fe20 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRID2_GPIO_Port, GRID2_Pin, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	f44f 7180 	mov.w	r1, #256	; 0x100
 800035a:	480c      	ldr	r0, [pc, #48]	; (800038c <disableAllDigit+0x48>)
 800035c:	f000 fe1a 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRID3_GPIO_Port, GRID3_Pin, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2180      	movs	r1, #128	; 0x80
 8000364:	4809      	ldr	r0, [pc, #36]	; (800038c <disableAllDigit+0x48>)
 8000366:	f000 fe15 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRID4_GPIO_Port, GRID4_Pin, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2140      	movs	r1, #64	; 0x40
 800036e:	4807      	ldr	r0, [pc, #28]	; (800038c <disableAllDigit+0x48>)
 8000370:	f000 fe10 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRID5_GPIO_Port, GRID5_Pin, GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2120      	movs	r1, #32
 8000378:	4804      	ldr	r0, [pc, #16]	; (800038c <disableAllDigit+0x48>)
 800037a:	f000 fe0b 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRID6_GPIO_Port, GRID6_Pin, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2110      	movs	r1, #16
 8000382:	4802      	ldr	r0, [pc, #8]	; (800038c <disableAllDigit+0x48>)
 8000384:	f000 fe06 	bl	8000f94 <HAL_GPIO_WritePin>
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	48000400 	.word	0x48000400

08000390 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000396:	f000 fb04 	bl	80009a2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800039a:	f000 f88f 	bl	80004bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800039e:	f000 f987 	bl	80006b0 <MX_GPIO_Init>
	MX_I2C1_Init();
 80003a2:	f000 f8e1 	bl	8000568 <MX_I2C1_Init>
	MX_RTC_Init();
 80003a6:	f000 f91d 	bl	80005e4 <MX_RTC_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t ct = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	77fb      	strb	r3, [r7, #31]
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2200      	movs	r2, #0
 80003b2:	4619      	mov	r1, r3
 80003b4:	483f      	ldr	r0, [pc, #252]	; (80004b4 <main+0x124>)
 80003b6:	f002 f9ea 	bl	800278e <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 80003ba:	f107 0318 	add.w	r3, r7, #24
 80003be:	2201      	movs	r2, #1
 80003c0:	4619      	mov	r1, r3
 80003c2:	483c      	ldr	r0, [pc, #240]	; (80004b4 <main+0x124>)
 80003c4:	f002 fac6 	bl	8002954 <HAL_RTC_GetDate>

		disableAllDigit();
 80003c8:	f7ff ffbc 	bl	8000344 <disableAllDigit>
		enableDigit(0);
 80003cc:	2000      	movs	r0, #0
 80003ce:	f7ff ff75 	bl	80002bc <enableDigit>
		displayNumber(gTime.Seconds % 10);
 80003d2:	79ba      	ldrb	r2, [r7, #6]
 80003d4:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <main+0x128>)
 80003d6:	fba3 1302 	umull	r1, r3, r3, r2
 80003da:	08d9      	lsrs	r1, r3, #3
 80003dc:	460b      	mov	r3, r1
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	440b      	add	r3, r1
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	1ad3      	subs	r3, r2, r3
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff53 	bl	8000294 <displayNumber>
		HAL_Delay(1);
 80003ee:	2001      	movs	r0, #1
 80003f0:	f000 fb4c 	bl	8000a8c <HAL_Delay>
		disableAllDigit();
 80003f4:	f7ff ffa6 	bl	8000344 <disableAllDigit>
		enableDigit(1);
 80003f8:	2001      	movs	r0, #1
 80003fa:	f7ff ff5f 	bl	80002bc <enableDigit>
		displayNumber(gTime.Seconds / 10);
 80003fe:	79bb      	ldrb	r3, [r7, #6]
 8000400:	4a2d      	ldr	r2, [pc, #180]	; (80004b8 <main+0x128>)
 8000402:	fba2 2303 	umull	r2, r3, r2, r3
 8000406:	08db      	lsrs	r3, r3, #3
 8000408:	b2db      	uxtb	r3, r3
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff ff42 	bl	8000294 <displayNumber>
		HAL_Delay(1);
 8000410:	2001      	movs	r0, #1
 8000412:	f000 fb3b 	bl	8000a8c <HAL_Delay>


		disableAllDigit();
 8000416:	f7ff ff95 	bl	8000344 <disableAllDigit>
		enableDigit(2);
 800041a:	2002      	movs	r0, #2
 800041c:	f7ff ff4e 	bl	80002bc <enableDigit>
		displayNumber(gTime.Minutes % 10);
 8000420:	797a      	ldrb	r2, [r7, #5]
 8000422:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <main+0x128>)
 8000424:	fba3 1302 	umull	r1, r3, r3, r2
 8000428:	08d9      	lsrs	r1, r3, #3
 800042a:	460b      	mov	r3, r1
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	440b      	add	r3, r1
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	1ad3      	subs	r3, r2, r3
 8000434:	b2db      	uxtb	r3, r3
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ff2c 	bl	8000294 <displayNumber>
		HAL_Delay(1);
 800043c:	2001      	movs	r0, #1
 800043e:	f000 fb25 	bl	8000a8c <HAL_Delay>
		disableAllDigit();
 8000442:	f7ff ff7f 	bl	8000344 <disableAllDigit>
		enableDigit(3);
 8000446:	2003      	movs	r0, #3
 8000448:	f7ff ff38 	bl	80002bc <enableDigit>
		displayNumber(gTime.Minutes / 10);
 800044c:	797b      	ldrb	r3, [r7, #5]
 800044e:	4a1a      	ldr	r2, [pc, #104]	; (80004b8 <main+0x128>)
 8000450:	fba2 2303 	umull	r2, r3, r2, r3
 8000454:	08db      	lsrs	r3, r3, #3
 8000456:	b2db      	uxtb	r3, r3
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ff1b 	bl	8000294 <displayNumber>
		HAL_Delay(1);
 800045e:	2001      	movs	r0, #1
 8000460:	f000 fb14 	bl	8000a8c <HAL_Delay>

		disableAllDigit();
 8000464:	f7ff ff6e 	bl	8000344 <disableAllDigit>
		enableDigit(4);
 8000468:	2004      	movs	r0, #4
 800046a:	f7ff ff27 	bl	80002bc <enableDigit>
		displayNumber(gTime.Hours % 10);
 800046e:	793a      	ldrb	r2, [r7, #4]
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <main+0x128>)
 8000472:	fba3 1302 	umull	r1, r3, r3, r2
 8000476:	08d9      	lsrs	r1, r3, #3
 8000478:	460b      	mov	r3, r1
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	440b      	add	r3, r1
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	1ad3      	subs	r3, r2, r3
 8000482:	b2db      	uxtb	r3, r3
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff05 	bl	8000294 <displayNumber>
		HAL_Delay(1);
 800048a:	2001      	movs	r0, #1
 800048c:	f000 fafe 	bl	8000a8c <HAL_Delay>
		disableAllDigit();
 8000490:	f7ff ff58 	bl	8000344 <disableAllDigit>
		enableDigit(5);
 8000494:	2005      	movs	r0, #5
 8000496:	f7ff ff11 	bl	80002bc <enableDigit>
		displayNumber(gTime.Hours / 10);
 800049a:	793b      	ldrb	r3, [r7, #4]
 800049c:	4a06      	ldr	r2, [pc, #24]	; (80004b8 <main+0x128>)
 800049e:	fba2 2303 	umull	r2, r3, r2, r3
 80004a2:	08db      	lsrs	r3, r3, #3
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff fef4 	bl	8000294 <displayNumber>
		HAL_Delay(1);
 80004ac:	2001      	movs	r0, #1
 80004ae:	f000 faed 	bl	8000a8c <HAL_Delay>
		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80004b2:	e77c      	b.n	80003ae <main+0x1e>
 80004b4:	2000008c 	.word	0x2000008c
 80004b8:	cccccccd 	.word	0xcccccccd

080004bc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b096      	sub	sp, #88	; 0x58
 80004c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	2244      	movs	r2, #68	; 0x44
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f002 fb8f 	bl	8002bee <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d0:	463b      	mov	r3, r7
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004e2:	f000 febf 	bl	8001264 <HAL_PWREx_ControlVoltageScaling>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80004ec:	f000 f942 	bl	8000774 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80004f0:	f000 fe9a 	bl	8001228 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <SystemClock_Config+0xa8>)
 80004f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004fa:	4a1a      	ldr	r2, [pc, #104]	; (8000564 <SystemClock_Config+0xa8>)
 80004fc:	f023 0318 	bic.w	r3, r3, #24
 8000500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000504:	2314      	movs	r3, #20
 8000506:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000508:	2301      	movs	r3, #1
 800050a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800050c:	2301      	movs	r3, #1
 800050e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000514:	2360      	movs	r3, #96	; 0x60
 8000516:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000518:	2300      	movs	r3, #0
 800051a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	4618      	mov	r0, r3
 8000522:	f000 fef5 	bl	8001310 <HAL_RCC_OscConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x74>
	{
		Error_Handler();
 800052c:	f000 f922 	bl	8000774 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000530:	230f      	movs	r3, #15
 8000532:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000544:	463b      	mov	r3, r7
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f001 faf5 	bl	8001b38 <HAL_RCC_ClockConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000554:	f000 f90e 	bl	8000774 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000558:	f001 fef2 	bl	8002340 <HAL_RCCEx_EnableMSIPLLMode>
}
 800055c:	bf00      	nop
 800055e:	3758      	adds	r7, #88	; 0x58
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40021000 	.word	0x40021000

08000568 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <MX_I2C1_Init+0x74>)
 800056e:	4a1c      	ldr	r2, [pc, #112]	; (80005e0 <MX_I2C1_Init+0x78>)
 8000570:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000E14;
 8000572:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <MX_I2C1_Init+0x74>)
 8000574:	f640 6214 	movw	r2, #3604	; 0xe14
 8000578:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <MX_I2C1_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000580:	4b16      	ldr	r3, [pc, #88]	; (80005dc <MX_I2C1_Init+0x74>)
 8000582:	2201      	movs	r2, #1
 8000584:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <MX_I2C1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800058c:	4b13      	ldr	r3, [pc, #76]	; (80005dc <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <MX_I2C1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000598:	4b10      	ldr	r3, [pc, #64]	; (80005dc <MX_I2C1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_I2C1_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <MX_I2C1_Init+0x74>)
 80005a6:	f000 fd0d 	bl	8000fc4 <HAL_I2C_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80005b0:	f000 f8e0 	bl	8000774 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005b4:	2100      	movs	r1, #0
 80005b6:	4809      	ldr	r0, [pc, #36]	; (80005dc <MX_I2C1_Init+0x74>)
 80005b8:	f000 fd9f 	bl	80010fa <HAL_I2CEx_ConfigAnalogFilter>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_I2C1_Init+0x5e>
	{
		Error_Handler();
 80005c2:	f000 f8d7 	bl	8000774 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <MX_I2C1_Init+0x74>)
 80005ca:	f000 fde1 	bl	8001190 <HAL_I2CEx_ConfigDigitalFilter>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_I2C1_Init+0x70>
	{
		Error_Handler();
 80005d4:	f000 f8ce 	bl	8000774 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000038 	.word	0x20000038
 80005e0:	40005400 	.word	0x40005400

080005e4 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80005ea:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <MX_RTC_Init+0xc4>)
 80005ec:	4a2f      	ldr	r2, [pc, #188]	; (80006ac <MX_RTC_Init+0xc8>)
 80005ee:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005f0:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <MX_RTC_Init+0xc4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80005f6:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <MX_RTC_Init+0xc4>)
 80005f8:	227f      	movs	r2, #127	; 0x7f
 80005fa:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80005fc:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <MX_RTC_Init+0xc4>)
 80005fe:	22ff      	movs	r2, #255	; 0xff
 8000600:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000602:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <MX_RTC_Init+0xc4>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <MX_RTC_Init+0xc4>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800060e:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <MX_RTC_Init+0xc4>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <MX_RTC_Init+0xc4>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800061a:	4823      	ldr	r0, [pc, #140]	; (80006a8 <MX_RTC_Init+0xc4>)
 800061c:	f001 ff92 	bl	8002544 <HAL_RTC_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_RTC_Init+0x46>
	{
		Error_Handler();
 8000626:	f000 f8a5 	bl	8000774 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */
#define MAGIC_NO 0x1200

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != MAGIC_NO)
 800062a:	2100      	movs	r1, #0
 800062c:	481e      	ldr	r0, [pc, #120]	; (80006a8 <MX_RTC_Init+0xc4>)
 800062e:	f002 fac8 	bl	8002bc2 <HAL_RTCEx_BKUPRead>
 8000632:	4603      	mov	r3, r0
 8000634:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8000638:	d032      	beq.n	80006a0 <MX_RTC_Init+0xbc>
	{
		RTC_TimeTypeDef sTime = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = {0};
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]

		sTime.Hours = 14;
 800064c:	230e      	movs	r3, #14
 800064e:	713b      	strb	r3, [r7, #4]
		sTime.Minutes = 39;
 8000650:	2327      	movs	r3, #39	; 0x27
 8000652:	717b      	strb	r3, [r7, #5]
		sTime.Seconds = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	71bb      	strb	r3, [r7, #6]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	4619      	mov	r1, r3
 800065e:	4812      	ldr	r0, [pc, #72]	; (80006a8 <MX_RTC_Init+0xc4>)
 8000660:	f001 fff8 	bl	8002654 <HAL_RTC_SetTime>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_RTC_Init+0x8a>
		{
			Error_Handler();
 800066a:	f000 f883 	bl	8000774 <Error_Handler>
		}
		sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800066e:	2307      	movs	r3, #7
 8000670:	703b      	strb	r3, [r7, #0]
		sDate.Month = RTC_MONTH_FEBRUARY;
 8000672:	2302      	movs	r3, #2
 8000674:	707b      	strb	r3, [r7, #1]
		sDate.Date = 18;
 8000676:	2312      	movs	r3, #18
 8000678:	70bb      	strb	r3, [r7, #2]
		sDate.Year = 24;
 800067a:	2318      	movs	r3, #24
 800067c:	70fb      	strb	r3, [r7, #3]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800067e:	463b      	mov	r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	4619      	mov	r1, r3
 8000684:	4808      	ldr	r0, [pc, #32]	; (80006a8 <MX_RTC_Init+0xc4>)
 8000686:	f002 f8de 	bl	8002846 <HAL_RTC_SetDate>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_RTC_Init+0xb0>
		{
			Error_Handler();
 8000690:	f000 f870 	bl	8000774 <Error_Handler>

		}
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, MAGIC_NO);
 8000694:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8000698:	2100      	movs	r1, #0
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <MX_RTC_Init+0xc4>)
 800069c:	f002 fa78 	bl	8002b90 <HAL_RTCEx_BKUPWrite>
	}
	/* USER CODE END RTC_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000008c 	.word	0x2000008c
 80006ac:	40002800 	.word	0x40002800

080006b0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	4b29      	ldr	r3, [pc, #164]	; (800076c <MX_GPIO_Init+0xbc>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a28      	ldr	r2, [pc, #160]	; (800076c <MX_GPIO_Init+0xbc>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b26      	ldr	r3, [pc, #152]	; (800076c <MX_GPIO_Init+0xbc>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b23      	ldr	r3, [pc, #140]	; (800076c <MX_GPIO_Init+0xbc>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a22      	ldr	r2, [pc, #136]	; (800076c <MX_GPIO_Init+0xbc>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_GPIO_Init+0xbc>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_GPIO_Init+0xbc>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <MX_GPIO_Init+0xbc>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_GPIO_Init+0xbc>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin
 800070e:	2200      	movs	r2, #0
 8000710:	21ff      	movs	r1, #255	; 0xff
 8000712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000716:	f000 fc3d 	bl	8000f94 <HAL_GPIO_WritePin>
			|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SEG_MINUS_Pin|LED_Pin|GRID6_Pin|GRID5_Pin
 800071a:	2200      	movs	r2, #0
 800071c:	f242 31f1 	movw	r1, #9201	; 0x23f1
 8000720:	4813      	ldr	r0, [pc, #76]	; (8000770 <MX_GPIO_Init+0xc0>)
 8000722:	f000 fc37 	bl	8000f94 <HAL_GPIO_WritePin>
			|GRID4_Pin|GRID3_Pin|GRID2_Pin|GRID1_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_D_Pin
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin SEG_DP_Pin */
	GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin
 8000726:	23ff      	movs	r3, #255	; 0xff
 8000728:	60fb      	str	r3, [r7, #12]
			|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	4619      	mov	r1, r3
 800073c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000740:	f000 faae 	bl	8000ca0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SEG_MINUS_Pin LED_Pin GRID6_Pin GRID5_Pin
                           GRID4_Pin GRID3_Pin GRID2_Pin GRID1_Pin */
	GPIO_InitStruct.Pin = SEG_MINUS_Pin|LED_Pin|GRID6_Pin|GRID5_Pin
 8000744:	f242 33f1 	movw	r3, #9201	; 0x23f1
 8000748:	60fb      	str	r3, [r7, #12]
			|GRID4_Pin|GRID3_Pin|GRID2_Pin|GRID1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	4619      	mov	r1, r3
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_GPIO_Init+0xc0>)
 800075e:	f000 fa9f 	bl	8000ca0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000762:	bf00      	nop
 8000764:	3720      	adds	r7, #32
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	48000400 	.word	0x48000400

08000774 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800077c:	e7fe      	b.n	800077c <Error_Handler+0x8>
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x44>)
 8000788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <HAL_MspInit+0x44>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6613      	str	r3, [r2, #96]	; 0x60
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <HAL_MspInit+0x44>)
 8000794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_MspInit+0x44>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <HAL_MspInit+0x44>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	6593      	str	r3, [r2, #88]	; 0x58
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_MspInit+0x44>)
 80007ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000

080007c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b0a0      	sub	sp, #128	; 0x80
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	225c      	movs	r2, #92	; 0x5c
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fa00 	bl	8002bee <memset>
  if(hi2c->Instance==I2C1)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a1f      	ldr	r2, [pc, #124]	; (8000870 <HAL_I2C_MspInit+0xa8>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d137      	bne.n	8000868 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007f8:	2340      	movs	r3, #64	; 0x40
 80007fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4618      	mov	r0, r3
 8000806:	f001 fb83 	bl	8001f10 <HAL_RCCEx_PeriphCLKConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000810:	f7ff ffb0 	bl	8000774 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <HAL_I2C_MspInit+0xac>)
 8000816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000818:	4a16      	ldr	r2, [pc, #88]	; (8000874 <HAL_I2C_MspInit+0xac>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <HAL_I2C_MspInit+0xac>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800082c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000830:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000832:	2312      	movs	r3, #18
 8000834:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800083e:	2304      	movs	r3, #4
 8000840:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000846:	4619      	mov	r1, r3
 8000848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084c:	f000 fa28 	bl	8000ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_I2C_MspInit+0xac>)
 8000852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <HAL_I2C_MspInit+0xac>)
 8000856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800085a:	6593      	str	r3, [r2, #88]	; 0x58
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_I2C_MspInit+0xac>)
 800085e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000868:	bf00      	nop
 800086a:	3780      	adds	r7, #128	; 0x80
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40005400 	.word	0x40005400
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b09a      	sub	sp, #104	; 0x68
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	225c      	movs	r2, #92	; 0x5c
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f002 f9b0 	bl	8002bee <memset>
  if(hrtc->Instance==RTC)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <HAL_RTC_MspInit+0x58>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d117      	bne.n	80008c8 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000898:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800089c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800089e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fb31 	bl	8001f10 <HAL_RCCEx_PeriphCLKConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80008b4:	f7ff ff5e 	bl	8000774 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_RTC_MspInit+0x5c>)
 80008ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <HAL_RTC_MspInit+0x5c>)
 80008c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80008c8:	bf00      	nop
 80008ca:	3768      	adds	r7, #104	; 0x68
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40002800 	.word	0x40002800
 80008d4:	40021000 	.word	0x40021000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000924:	f000 f892 	bl	8000a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <SystemInit+0x20>)
 8000932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <SystemInit+0x20>)
 8000938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800093c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000988 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000954:	f7ff ffea 	bl	800092c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <LoopForever+0x6>)
  ldr r1, =_edata
 800095a:	490d      	ldr	r1, [pc, #52]	; (8000990 <LoopForever+0xa>)
  ldr r2, =_sidata
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <LoopForever+0xe>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000970:	4c0a      	ldr	r4, [pc, #40]	; (800099c <LoopForever+0x16>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097e:	f002 f93f 	bl	8002c00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000982:	f7ff fd05 	bl	8000390 <main>

08000986 <LoopForever>:

LoopForever:
    b LoopForever
 8000986:	e7fe      	b.n	8000986 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000988:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000994:	08002ca8 	.word	0x08002ca8
  ldr r2, =_sbss
 8000998:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800099c:	200000b4 	.word	0x200000b4

080009a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC1_IRQHandler>

080009a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a8:	2300      	movs	r3, #0
 80009aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 f943 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009b2:	200f      	movs	r0, #15
 80009b4:	f000 f80e 	bl	80009d4 <HAL_InitTick>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	71fb      	strb	r3, [r7, #7]
 80009c2:	e001      	b.n	80009c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009c4:	f7ff fedc 	bl	8000780 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009c8:	79fb      	ldrb	r3, [r7, #7]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009dc:	2300      	movs	r3, #0
 80009de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <HAL_InitTick+0x6c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d023      	beq.n	8000a30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <HAL_InitTick+0x70>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_InitTick+0x6c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f941 	bl	8000c86 <HAL_SYSTICK_Config>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10f      	bne.n	8000a2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d809      	bhi.n	8000a24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a10:	2200      	movs	r2, #0
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f000 f919 	bl	8000c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <HAL_InitTick+0x74>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
 8000a22:	e007      	b.n	8000a34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e004      	b.n	8000a34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	73fb      	strb	r3, [r7, #15]
 8000a2e:	e001      	b.n	8000a34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000018 	.word	0x20000018
 8000a44:	20000010 	.word	0x20000010
 8000a48:	20000014 	.word	0x20000014

08000a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_IncTick+0x20>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_IncTick+0x24>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <HAL_IncTick+0x24>)
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000018 	.word	0x20000018
 8000a70:	200000b0 	.word	0x200000b0

08000a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <HAL_GetTick+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	200000b0 	.word	0x200000b0

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff ffee 	bl	8000a74 <HAL_GetTick>
 8000a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d005      	beq.n	8000ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <HAL_Delay+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ab2:	bf00      	nop
 8000ab4:	f7ff ffde 	bl	8000a74 <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f7      	bhi.n	8000ab4 <HAL_Delay+0x28>
  {
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000018 	.word	0x20000018

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f7ff ff8e 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff47 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff5c 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff8e 	bl	8000b8c <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffb0 	bl	8000bf4 <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cae:	e154      	b.n	8000f5a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 8146 	beq.w	8000f54 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d005      	beq.n	8000ce0 <HAL_GPIO_Init+0x40>
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d130      	bne.n	8000d42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d16:	2201      	movs	r2, #1
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	091b      	lsrs	r3, r3, #4
 8000d2c:	f003 0201 	and.w	r2, r3, #1
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d017      	beq.n	8000d7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d123      	bne.n	8000dd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	08da      	lsrs	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3208      	adds	r2, #8
 8000d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	220f      	movs	r2, #15
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	691a      	ldr	r2, [r3, #16]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	08da      	lsrs	r2, r3, #3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3208      	adds	r2, #8
 8000dcc:	6939      	ldr	r1, [r7, #16]
 8000dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0203 	and.w	r2, r3, #3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 80a0 	beq.w	8000f54 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e14:	4b58      	ldr	r3, [pc, #352]	; (8000f78 <HAL_GPIO_Init+0x2d8>)
 8000e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e18:	4a57      	ldr	r2, [pc, #348]	; (8000f78 <HAL_GPIO_Init+0x2d8>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000e20:	4b55      	ldr	r3, [pc, #340]	; (8000f78 <HAL_GPIO_Init+0x2d8>)
 8000e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e2c:	4a53      	ldr	r2, [pc, #332]	; (8000f7c <HAL_GPIO_Init+0x2dc>)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	3302      	adds	r3, #2
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e56:	d019      	beq.n	8000e8c <HAL_GPIO_Init+0x1ec>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a49      	ldr	r2, [pc, #292]	; (8000f80 <HAL_GPIO_Init+0x2e0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d013      	beq.n	8000e88 <HAL_GPIO_Init+0x1e8>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a48      	ldr	r2, [pc, #288]	; (8000f84 <HAL_GPIO_Init+0x2e4>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d00d      	beq.n	8000e84 <HAL_GPIO_Init+0x1e4>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a47      	ldr	r2, [pc, #284]	; (8000f88 <HAL_GPIO_Init+0x2e8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d007      	beq.n	8000e80 <HAL_GPIO_Init+0x1e0>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a46      	ldr	r2, [pc, #280]	; (8000f8c <HAL_GPIO_Init+0x2ec>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d101      	bne.n	8000e7c <HAL_GPIO_Init+0x1dc>
 8000e78:	2304      	movs	r3, #4
 8000e7a:	e008      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e7c:	2307      	movs	r3, #7
 8000e7e:	e006      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e80:	2303      	movs	r3, #3
 8000e82:	e004      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e002      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	f002 0203 	and.w	r2, r2, #3
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	4093      	lsls	r3, r2
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e9e:	4937      	ldr	r1, [pc, #220]	; (8000f7c <HAL_GPIO_Init+0x2dc>)
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eac:	4b38      	ldr	r3, [pc, #224]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ed0:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ed6:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000efa:	4a25      	ldr	r2, [pc, #148]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f00:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f24:	4a1a      	ldr	r2, [pc, #104]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa22 f303 	lsr.w	r3, r2, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f47f aea3 	bne.w	8000cb0 <HAL_GPIO_Init+0x10>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	371c      	adds	r7, #28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	48000400 	.word	0x48000400
 8000f84:	48000800 	.word	0x48000800
 8000f88:	48000c00 	.word	0x48000c00
 8000f8c:	48001000 	.word	0x48001000
 8000f90:	40010400 	.word	0x40010400

08000f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa4:	787b      	ldrb	r3, [r7, #1]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000faa:	887a      	ldrh	r2, [r7, #2]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e08d      	b.n	80010f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d106      	bne.n	8000ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff fbec 	bl	80007c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2224      	movs	r2, #36	; 0x24
 8000ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001014:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001024:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d107      	bne.n	800103e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	e006      	b.n	800104c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800104a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d108      	bne.n	8001066 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	e007      	b.n	8001076 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001074:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001088:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001098:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691a      	ldr	r2, [r3, #16]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	430a      	orrs	r2, r1
 80010b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69d9      	ldr	r1, [r3, #28]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a1a      	ldr	r2, [r3, #32]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0201 	orr.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2220      	movs	r2, #32
 80010de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b20      	cmp	r3, #32
 800110e:	d138      	bne.n	8001182 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001116:	2b01      	cmp	r3, #1
 8001118:	d101      	bne.n	800111e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800111a:	2302      	movs	r3, #2
 800111c:	e032      	b.n	8001184 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2224      	movs	r2, #36	; 0x24
 800112a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 0201 	bic.w	r2, r2, #1
 800113c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800114c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6819      	ldr	r1, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0201 	orr.w	r2, r2, #1
 800116c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2220      	movs	r2, #32
 8001172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001182:	2302      	movs	r3, #2
  }
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d139      	bne.n	800121a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d101      	bne.n	80011b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80011b0:	2302      	movs	r3, #2
 80011b2:	e033      	b.n	800121c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2224      	movs	r2, #36	; 0x24
 80011c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0201 	bic.w	r2, r2, #1
 80011d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 0201 	orr.w	r2, r2, #1
 8001204:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2220      	movs	r2, #32
 800120a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800121a:	2302      	movs	r3, #2
  }
}
 800121c:	4618      	mov	r0, r3
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40007000 	.word	0x40007000

08001248 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <HAL_PWREx_GetVoltageRange+0x18>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40007000 	.word	0x40007000

08001264 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001272:	d130      	bne.n	80012d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800127c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001280:	d038      	beq.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800128a:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001290:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2232      	movs	r2, #50	; 0x32
 8001298:	fb02 f303 	mul.w	r3, r2, r3
 800129c:	4a1b      	ldr	r2, [pc, #108]	; (800130c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800129e:	fba2 2303 	umull	r2, r3, r2, r3
 80012a2:	0c9b      	lsrs	r3, r3, #18
 80012a4:	3301      	adds	r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a8:	e002      	b.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012bc:	d102      	bne.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f2      	bne.n	80012aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d0:	d110      	bne.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e00f      	b.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e2:	d007      	beq.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012ec:	4a05      	ldr	r2, [pc, #20]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40007000 	.word	0x40007000
 8001308:	20000010 	.word	0x20000010
 800130c:	431bde83 	.word	0x431bde83

08001310 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	f000 bc02 	b.w	8001b28 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001324:	4b96      	ldr	r3, [pc, #600]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800132e:	4b94      	ldr	r3, [pc, #592]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80e4 	beq.w	800150e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <HAL_RCC_OscConfig+0x4c>
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2b0c      	cmp	r3, #12
 8001350:	f040 808b 	bne.w	800146a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	2b01      	cmp	r3, #1
 8001358:	f040 8087 	bne.w	800146a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800135c:	4b88      	ldr	r3, [pc, #544]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <HAL_RCC_OscConfig+0x64>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e3d9      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	4b81      	ldr	r3, [pc, #516]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <HAL_RCC_OscConfig+0x7e>
 8001384:	4b7e      	ldr	r3, [pc, #504]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800138c:	e005      	b.n	800139a <HAL_RCC_OscConfig+0x8a>
 800138e:	4b7c      	ldr	r3, [pc, #496]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800139a:	4293      	cmp	r3, r2
 800139c:	d223      	bcs.n	80013e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fd54 	bl	8001e50 <RCC_SetFlashLatencyFromMSIRange>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e3ba      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b2:	4b73      	ldr	r3, [pc, #460]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a72      	ldr	r2, [pc, #456]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b70      	ldr	r3, [pc, #448]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	496d      	ldr	r1, [pc, #436]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d0:	4b6b      	ldr	r3, [pc, #428]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	4968      	ldr	r1, [pc, #416]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
 80013e4:	e025      	b.n	8001432 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e6:	4b66      	ldr	r3, [pc, #408]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a65      	ldr	r2, [pc, #404]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b63      	ldr	r3, [pc, #396]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	4960      	ldr	r1, [pc, #384]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001404:	4b5e      	ldr	r3, [pc, #376]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	495b      	ldr	r1, [pc, #364]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d109      	bne.n	8001432 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fd14 	bl	8001e50 <RCC_SetFlashLatencyFromMSIRange>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e37a      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001432:	f000 fc81 	bl	8001d38 <HAL_RCC_GetSysClockFreq>
 8001436:	4602      	mov	r2, r0
 8001438:	4b51      	ldr	r3, [pc, #324]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	4950      	ldr	r1, [pc, #320]	; (8001584 <HAL_RCC_OscConfig+0x274>)
 8001444:	5ccb      	ldrb	r3, [r1, r3]
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	fa22 f303 	lsr.w	r3, r2, r3
 800144e:	4a4e      	ldr	r2, [pc, #312]	; (8001588 <HAL_RCC_OscConfig+0x278>)
 8001450:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001452:	4b4e      	ldr	r3, [pc, #312]	; (800158c <HAL_RCC_OscConfig+0x27c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fabc 	bl	80009d4 <HAL_InitTick>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d052      	beq.n	800150c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	e35e      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d032      	beq.n	80014d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001472:	4b43      	ldr	r3, [pc, #268]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a42      	ldr	r2, [pc, #264]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800147e:	f7ff faf9 	bl	8000a74 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001486:	f7ff faf5 	bl	8000a74 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e347      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001498:	4b39      	ldr	r3, [pc, #228]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a4:	4b36      	ldr	r3, [pc, #216]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a35      	ldr	r2, [pc, #212]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80014aa:	f043 0308 	orr.w	r3, r3, #8
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b33      	ldr	r3, [pc, #204]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4930      	ldr	r1, [pc, #192]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	492b      	ldr	r1, [pc, #172]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	604b      	str	r3, [r1, #4]
 80014d6:	e01a      	b.n	800150e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014d8:	4b29      	ldr	r3, [pc, #164]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a28      	ldr	r2, [pc, #160]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fac6 	bl	8000a74 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ec:	f7ff fac2 	bl	8000a74 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e314      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x1dc>
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800150c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d073      	beq.n	8001602 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	2b08      	cmp	r3, #8
 800151e:	d005      	beq.n	800152c <HAL_RCC_OscConfig+0x21c>
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	2b0c      	cmp	r3, #12
 8001524:	d10e      	bne.n	8001544 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b03      	cmp	r3, #3
 800152a:	d10b      	bne.n	8001544 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d063      	beq.n	8001600 <HAL_RCC_OscConfig+0x2f0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d15f      	bne.n	8001600 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e2f1      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154c:	d106      	bne.n	800155c <HAL_RCC_OscConfig+0x24c>
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e025      	b.n	80015a8 <HAL_RCC_OscConfig+0x298>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001564:	d114      	bne.n	8001590 <HAL_RCC_OscConfig+0x280>
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a05      	ldr	r2, [pc, #20]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 800156c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a02      	ldr	r2, [pc, #8]	; (8001580 <HAL_RCC_OscConfig+0x270>)
 8001578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e013      	b.n	80015a8 <HAL_RCC_OscConfig+0x298>
 8001580:	40021000 	.word	0x40021000
 8001584:	08002c60 	.word	0x08002c60
 8001588:	20000010 	.word	0x20000010
 800158c:	20000014 	.word	0x20000014
 8001590:	4ba0      	ldr	r3, [pc, #640]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a9f      	ldr	r2, [pc, #636]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 8001596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b9d      	ldr	r3, [pc, #628]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a9c      	ldr	r2, [pc, #624]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fa60 	bl	8000a74 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fa5c 	bl	8000a74 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e2ae      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ca:	4b92      	ldr	r3, [pc, #584]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x2a8>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fa4c 	bl	8000a74 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fa48 	bl	8000a74 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e29a      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f2:	4b88      	ldr	r3, [pc, #544]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2d0>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d060      	beq.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2b04      	cmp	r3, #4
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x310>
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2b0c      	cmp	r3, #12
 8001618:	d119      	bne.n	800164e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d116      	bne.n	800164e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001620:	4b7c      	ldr	r3, [pc, #496]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_OscConfig+0x328>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e277      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	4b76      	ldr	r3, [pc, #472]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	4973      	ldr	r1, [pc, #460]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800164c:	e040      	b.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d023      	beq.n	800169e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001656:	4b6f      	ldr	r3, [pc, #444]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6e      	ldr	r2, [pc, #440]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001662:	f7ff fa07 	bl	8000a74 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff fa03 	bl	8000a74 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e255      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167c:	4b65      	ldr	r3, [pc, #404]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001688:	4b62      	ldr	r3, [pc, #392]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	061b      	lsls	r3, r3, #24
 8001696:	495f      	ldr	r1, [pc, #380]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
 800169c:	e018      	b.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169e:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a5c      	ldr	r2, [pc, #368]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 80016a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016aa:	f7ff f9e3 	bl	8000a74 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b2:	f7ff f9df 	bl	8000a74 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e231      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c4:	4b53      	ldr	r3, [pc, #332]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f0      	bne.n	80016b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d03c      	beq.n	8001756 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d01c      	beq.n	800171e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e4:	4b4b      	ldr	r3, [pc, #300]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 80016e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ea:	4a4a      	ldr	r2, [pc, #296]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f4:	f7ff f9be 	bl	8000a74 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fc:	f7ff f9ba 	bl	8000a74 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e20c      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800170e:	4b41      	ldr	r3, [pc, #260]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 8001710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0ef      	beq.n	80016fc <HAL_RCC_OscConfig+0x3ec>
 800171c:	e01b      	b.n	8001756 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171e:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 8001720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001724:	4a3b      	ldr	r2, [pc, #236]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172e:	f7ff f9a1 	bl	8000a74 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001736:	f7ff f99d 	bl	8000a74 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e1ef      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001748:	4b32      	ldr	r3, [pc, #200]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 800174a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1ef      	bne.n	8001736 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80a6 	beq.w	80018b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001768:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10d      	bne.n	8001790 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	4b27      	ldr	r3, [pc, #156]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	4a26      	ldr	r2, [pc, #152]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 800177a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177e:	6593      	str	r3, [r2, #88]	; 0x58
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178c:	2301      	movs	r3, #1
 800178e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001790:	4b21      	ldr	r3, [pc, #132]	; (8001818 <HAL_RCC_OscConfig+0x508>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d118      	bne.n	80017ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <HAL_RCC_OscConfig+0x508>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <HAL_RCC_OscConfig+0x508>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a8:	f7ff f964 	bl	8000a74 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b0:	f7ff f960 	bl	8000a74 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e1b2      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_RCC_OscConfig+0x508>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d108      	bne.n	80017e8 <HAL_RCC_OscConfig+0x4d8>
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 80017d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e6:	e029      	b.n	800183c <HAL_RCC_OscConfig+0x52c>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d115      	bne.n	800181c <HAL_RCC_OscConfig+0x50c>
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f6:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001806:	4a03      	ldr	r2, [pc, #12]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001810:	e014      	b.n	800183c <HAL_RCC_OscConfig+0x52c>
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	40007000 	.word	0x40007000
 800181c:	4b9a      	ldr	r3, [pc, #616]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 800181e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001822:	4a99      	ldr	r2, [pc, #612]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800182c:	4b96      	ldr	r3, [pc, #600]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 800182e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001832:	4a95      	ldr	r2, [pc, #596]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 8001834:	f023 0304 	bic.w	r3, r3, #4
 8001838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d016      	beq.n	8001872 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff f916 	bl	8000a74 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800184a:	e00a      	b.n	8001862 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7ff f912 	bl	8000a74 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e162      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001862:	4b89      	ldr	r3, [pc, #548]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 8001864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ed      	beq.n	800184c <HAL_RCC_OscConfig+0x53c>
 8001870:	e015      	b.n	800189e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7ff f8ff 	bl	8000a74 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7ff f8fb 	bl	8000a74 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	; 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e14b      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001890:	4b7d      	ldr	r3, [pc, #500]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1ed      	bne.n	800187a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800189e:	7ffb      	ldrb	r3, [r7, #31]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d105      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a4:	4b78      	ldr	r3, [pc, #480]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	4a77      	ldr	r2, [pc, #476]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 80018aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0320 	and.w	r3, r3, #32
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d03c      	beq.n	8001936 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d01c      	beq.n	80018fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018c4:	4b70      	ldr	r3, [pc, #448]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 80018c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ca:	4a6f      	ldr	r2, [pc, #444]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d4:	f7ff f8ce 	bl	8000a74 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018dc:	f7ff f8ca 	bl	8000a74 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e11c      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ee:	4b66      	ldr	r3, [pc, #408]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 80018f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0ef      	beq.n	80018dc <HAL_RCC_OscConfig+0x5cc>
 80018fc:	e01b      	b.n	8001936 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018fe:	4b62      	ldr	r3, [pc, #392]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 8001900:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001904:	4a60      	ldr	r2, [pc, #384]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190e:	f7ff f8b1 	bl	8000a74 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001916:	f7ff f8ad 	bl	8000a74 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e0ff      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001928:	4b57      	ldr	r3, [pc, #348]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 800192a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1ef      	bne.n	8001916 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 80f3 	beq.w	8001b26 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	2b02      	cmp	r3, #2
 8001946:	f040 80c9 	bne.w	8001adc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800194a:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 0203 	and.w	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	429a      	cmp	r2, r3
 800195c:	d12c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	3b01      	subs	r3, #1
 800196a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d123      	bne.n	80019b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d11b      	bne.n	80019b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d113      	bne.n	80019b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199a:	085b      	lsrs	r3, r3, #1
 800199c:	3b01      	subs	r3, #1
 800199e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d109      	bne.n	80019b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	085b      	lsrs	r3, r3, #1
 80019b0:	3b01      	subs	r3, #1
 80019b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d06b      	beq.n	8001a90 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2b0c      	cmp	r3, #12
 80019bc:	d062      	beq.n	8001a84 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019be:	4b32      	ldr	r3, [pc, #200]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e0ac      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019ce:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a2d      	ldr	r2, [pc, #180]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 80019d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019da:	f7ff f84b 	bl	8000a74 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e2:	f7ff f847 	bl	8000a74 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e099      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a00:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <HAL_RCC_OscConfig+0x77c>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a10:	3a01      	subs	r2, #1
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	4311      	orrs	r1, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a1a:	0212      	lsls	r2, r2, #8
 8001a1c:	4311      	orrs	r1, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a22:	0852      	lsrs	r2, r2, #1
 8001a24:	3a01      	subs	r2, #1
 8001a26:	0552      	lsls	r2, r2, #21
 8001a28:	4311      	orrs	r1, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a2e:	0852      	lsrs	r2, r2, #1
 8001a30:	3a01      	subs	r2, #1
 8001a32:	0652      	lsls	r2, r2, #25
 8001a34:	4311      	orrs	r1, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a3a:	06d2      	lsls	r2, r2, #27
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	4912      	ldr	r1, [pc, #72]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0f      	ldr	r2, [pc, #60]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 8001a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4a0c      	ldr	r2, [pc, #48]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 8001a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a5c:	f7ff f80a 	bl	8000a74 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff f806 	bl	8000a74 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e058      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a76:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a82:	e050      	b.n	8001b26 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e04f      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <HAL_RCC_OscConfig+0x820>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d144      	bne.n	8001b26 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_RCC_OscConfig+0x820>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a23      	ldr	r2, [pc, #140]	; (8001b30 <HAL_RCC_OscConfig+0x820>)
 8001aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_RCC_OscConfig+0x820>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4a20      	ldr	r2, [pc, #128]	; (8001b30 <HAL_RCC_OscConfig+0x820>)
 8001aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ab2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ab4:	f7fe ffde 	bl	8000a74 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abc:	f7fe ffda 	bl	8000a74 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e02c      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_RCC_OscConfig+0x820>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x7ac>
 8001ada:	e024      	b.n	8001b26 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d01f      	beq.n	8001b22 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_RCC_OscConfig+0x820>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <HAL_RCC_OscConfig+0x820>)
 8001ae8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7fe ffc1 	bl	8000a74 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af6:	f7fe ffbd 	bl	8000a74 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e00f      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_RCC_OscConfig+0x820>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_RCC_OscConfig+0x820>)
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	4905      	ldr	r1, [pc, #20]	; (8001b30 <HAL_RCC_OscConfig+0x820>)
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_RCC_OscConfig+0x824>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60cb      	str	r3, [r1, #12]
 8001b20:	e001      	b.n	8001b26 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000
 8001b34:	feeefffc 	.word	0xfeeefffc

08001b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0e7      	b.n	8001d1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b4c:	4b75      	ldr	r3, [pc, #468]	; (8001d24 <HAL_RCC_ClockConfig+0x1ec>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d910      	bls.n	8001b7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5a:	4b72      	ldr	r3, [pc, #456]	; (8001d24 <HAL_RCC_ClockConfig+0x1ec>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 0207 	bic.w	r2, r3, #7
 8001b62:	4970      	ldr	r1, [pc, #448]	; (8001d24 <HAL_RCC_ClockConfig+0x1ec>)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	4b6e      	ldr	r3, [pc, #440]	; (8001d24 <HAL_RCC_ClockConfig+0x1ec>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0cf      	b.n	8001d1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d010      	beq.n	8001baa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	4b66      	ldr	r3, [pc, #408]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d908      	bls.n	8001baa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b98:	4b63      	ldr	r3, [pc, #396]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4960      	ldr	r1, [pc, #384]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d04c      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d107      	bne.n	8001bce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbe:	4b5a      	ldr	r3, [pc, #360]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d121      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0a6      	b.n	8001d1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd6:	4b54      	ldr	r3, [pc, #336]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d115      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e09a      	b.n	8001d1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bee:	4b4e      	ldr	r3, [pc, #312]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d109      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e08e      	b.n	8001d1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bfe:	4b4a      	ldr	r3, [pc, #296]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e086      	b.n	8001d1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c0e:	4b46      	ldr	r3, [pc, #280]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f023 0203 	bic.w	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	4943      	ldr	r1, [pc, #268]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c20:	f7fe ff28 	bl	8000a74 <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c28:	f7fe ff24 	bl	8000a74 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e06e      	b.n	8001d1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 020c 	and.w	r2, r3, #12
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d1eb      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d010      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	4b31      	ldr	r3, [pc, #196]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d208      	bcs.n	8001c7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b2e      	ldr	r3, [pc, #184]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	492b      	ldr	r1, [pc, #172]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <HAL_RCC_ClockConfig+0x1ec>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d210      	bcs.n	8001cae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8c:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <HAL_RCC_ClockConfig+0x1ec>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 0207 	bic.w	r2, r3, #7
 8001c94:	4923      	ldr	r1, [pc, #140]	; (8001d24 <HAL_RCC_ClockConfig+0x1ec>)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <HAL_RCC_ClockConfig+0x1ec>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e036      	b.n	8001d1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d008      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	4918      	ldr	r1, [pc, #96]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d009      	beq.n	8001cec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4910      	ldr	r1, [pc, #64]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cec:	f000 f824 	bl	8001d38 <HAL_RCC_GetSysClockFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	490b      	ldr	r1, [pc, #44]	; (8001d2c <HAL_RCC_ClockConfig+0x1f4>)
 8001cfe:	5ccb      	ldrb	r3, [r1, r3]
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
 8001d08:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <HAL_RCC_ClockConfig+0x1f8>)
 8001d0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_RCC_ClockConfig+0x1fc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fe5f 	bl	80009d4 <HAL_InitTick>
 8001d16:	4603      	mov	r3, r0
 8001d18:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d1a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08002c60 	.word	0x08002c60
 8001d30:	20000010 	.word	0x20000010
 8001d34:	20000014 	.word	0x20000014

08001d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d46:	4b3e      	ldr	r3, [pc, #248]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d50:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0x34>
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	2b0c      	cmp	r3, #12
 8001d64:	d121      	bne.n	8001daa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d11e      	bne.n	8001daa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d6c:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d107      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d78:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	e005      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d94:	4a2b      	ldr	r2, [pc, #172]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10d      	bne.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001da8:	e00a      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d102      	bne.n	8001db6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001db0:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x110>)
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	e004      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dbc:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x114>)
 8001dbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	2b0c      	cmp	r3, #12
 8001dc4:	d134      	bne.n	8001e30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d003      	beq.n	8001dde <HAL_RCC_GetSysClockFreq+0xa6>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d003      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0xac>
 8001ddc:	e005      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dde:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x110>)
 8001de0:	617b      	str	r3, [r7, #20]
      break;
 8001de2:	e005      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x114>)
 8001de6:	617b      	str	r3, [r7, #20]
      break;
 8001de8:	e002      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	617b      	str	r3, [r7, #20]
      break;
 8001dee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	091b      	lsrs	r3, r3, #4
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	fb03 f202 	mul.w	r2, r3, r2
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	0e5b      	lsrs	r3, r3, #25
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	3301      	adds	r3, #1
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e30:	69bb      	ldr	r3, [r7, #24]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	08002c70 	.word	0x08002c70
 8001e48:	00f42400 	.word	0x00f42400
 8001e4c:	007a1200 	.word	0x007a1200

08001e50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e5c:	4b2a      	ldr	r3, [pc, #168]	; (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e68:	f7ff f9ee 	bl	8001248 <HAL_PWREx_GetVoltageRange>
 8001e6c:	6178      	str	r0, [r7, #20]
 8001e6e:	e014      	b.n	8001e9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e70:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e7c:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e88:	f7ff f9de 	bl	8001248 <HAL_PWREx_GetVoltageRange>
 8001e8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	4a1d      	ldr	r2, [pc, #116]	; (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea0:	d10b      	bne.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b80      	cmp	r3, #128	; 0x80
 8001ea6:	d919      	bls.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2ba0      	cmp	r3, #160	; 0xa0
 8001eac:	d902      	bls.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eae:	2302      	movs	r3, #2
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	e013      	b.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	e010      	b.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b80      	cmp	r3, #128	; 0x80
 8001ebe:	d902      	bls.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	e00a      	b.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b80      	cmp	r3, #128	; 0x80
 8001eca:	d102      	bne.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ecc:	2302      	movs	r3, #2
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	e004      	b.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b70      	cmp	r3, #112	; 0x70
 8001ed6:	d101      	bne.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ed8:	2301      	movs	r3, #1
 8001eda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 0207 	bic.w	r2, r3, #7
 8001ee4:	4909      	ldr	r1, [pc, #36]	; (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d001      	beq.n	8001efe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40022000 	.word	0x40022000

08001f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f18:	2300      	movs	r3, #0
 8001f1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d031      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f34:	d01a      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f3a:	d814      	bhi.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d009      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f44:	d10f      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	4a5c      	ldr	r2, [pc, #368]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f50:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f52:	e00c      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3304      	adds	r3, #4
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 fa00 	bl	8002360 <RCCEx_PLLSAI1_Config>
 8001f60:	4603      	mov	r3, r0
 8001f62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f64:	e003      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	74fb      	strb	r3, [r7, #19]
      break;
 8001f6a:	e000      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f6e:	7cfb      	ldrb	r3, [r7, #19]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10b      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f74:	4b51      	ldr	r3, [pc, #324]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	494e      	ldr	r1, [pc, #312]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f8a:	e001      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f8c:	7cfb      	ldrb	r3, [r7, #19]
 8001f8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 809e 	beq.w	80020da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fa2:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb8:	4b40      	ldr	r3, [pc, #256]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	4a3f      	ldr	r2, [pc, #252]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc4:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd4:	4b3a      	ldr	r3, [pc, #232]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a39      	ldr	r2, [pc, #228]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fe0:	f7fe fd48 	bl	8000a74 <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fe6:	e009      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe8:	f7fe fd44 	bl	8000a74 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d902      	bls.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	74fb      	strb	r3, [r7, #19]
        break;
 8001ffa:	e005      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ffc:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ef      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d15a      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800200e:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002018:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01e      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	429a      	cmp	r2, r3
 8002028:	d019      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800202a:	4b24      	ldr	r3, [pc, #144]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002034:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002036:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203c:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800203e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204c:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800204e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002056:	4a19      	ldr	r2, [pc, #100]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d016      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7fe fd04 	bl	8000a74 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206e:	e00b      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7fe fd00 	bl	8000a74 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d902      	bls.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	74fb      	strb	r3, [r7, #19]
            break;
 8002086:	e006      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0ec      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	4904      	ldr	r1, [pc, #16]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020b2:	e009      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	74bb      	strb	r3, [r7, #18]
 80020b8:	e006      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c8:	7c7b      	ldrb	r3, [r7, #17]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d105      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ce:	4b9b      	ldr	r3, [pc, #620]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	4a9a      	ldr	r2, [pc, #616]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80020d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020e6:	4b95      	ldr	r3, [pc, #596]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80020e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ec:	f023 0203 	bic.w	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4991      	ldr	r1, [pc, #580]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00a      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002108:	4b8c      	ldr	r3, [pc, #560]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	f023 020c 	bic.w	r2, r3, #12
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	4989      	ldr	r1, [pc, #548]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00a      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800212a:	4b84      	ldr	r3, [pc, #528]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800212c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002130:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	4980      	ldr	r1, [pc, #512]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800214c:	4b7b      	ldr	r3, [pc, #492]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002152:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	4978      	ldr	r1, [pc, #480]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800216e:	4b73      	ldr	r3, [pc, #460]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002174:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217c:	496f      	ldr	r1, [pc, #444]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002190:	4b6a      	ldr	r3, [pc, #424]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4967      	ldr	r1, [pc, #412]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021b2:	4b62      	ldr	r3, [pc, #392]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	495e      	ldr	r1, [pc, #376]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021d4:	4b59      	ldr	r3, [pc, #356]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e2:	4956      	ldr	r1, [pc, #344]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021f6:	4b51      	ldr	r3, [pc, #324]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	494d      	ldr	r1, [pc, #308]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d028      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002218:	4b48      	ldr	r3, [pc, #288]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002226:	4945      	ldr	r1, [pc, #276]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002236:	d106      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002238:	4b40      	ldr	r3, [pc, #256]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a3f      	ldr	r2, [pc, #252]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800223e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002242:	60d3      	str	r3, [r2, #12]
 8002244:	e011      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800224e:	d10c      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3304      	adds	r3, #4
 8002254:	2101      	movs	r1, #1
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f882 	bl	8002360 <RCCEx_PLLSAI1_Config>
 800225c:	4603      	mov	r3, r0
 800225e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8002266:	7cfb      	ldrb	r3, [r7, #19]
 8002268:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d028      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002276:	4b31      	ldr	r3, [pc, #196]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002284:	492d      	ldr	r1, [pc, #180]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002294:	d106      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002296:	4b29      	ldr	r3, [pc, #164]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	4a28      	ldr	r2, [pc, #160]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800229c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022a0:	60d3      	str	r3, [r2, #12]
 80022a2:	e011      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3304      	adds	r3, #4
 80022b2:	2101      	movs	r1, #1
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f853 	bl	8002360 <RCCEx_PLLSAI1_Config>
 80022ba:	4603      	mov	r3, r0
 80022bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022be:	7cfb      	ldrb	r3, [r7, #19]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80022c4:	7cfb      	ldrb	r3, [r7, #19]
 80022c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01c      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e2:	4916      	ldr	r1, [pc, #88]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022f2:	d10c      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3304      	adds	r3, #4
 80022f8:	2102      	movs	r1, #2
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 f830 	bl	8002360 <RCCEx_PLLSAI1_Config>
 8002300:	4603      	mov	r3, r0
 8002302:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800230a:	7cfb      	ldrb	r3, [r7, #19]
 800230c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002320:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002328:	4904      	ldr	r1, [pc, #16]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002330:	7cbb      	ldrb	r3, [r7, #18]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000

08002340 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000

08002360 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800236e:	4b74      	ldr	r3, [pc, #464]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d018      	beq.n	80023ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800237a:	4b71      	ldr	r3, [pc, #452]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0203 	and.w	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d10d      	bne.n	80023a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
       ||
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002392:	4b6b      	ldr	r3, [pc, #428]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
       ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d047      	beq.n	8002436 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	e044      	b.n	8002436 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d018      	beq.n	80023e6 <RCCEx_PLLSAI1_Config+0x86>
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d825      	bhi.n	8002404 <RCCEx_PLLSAI1_Config+0xa4>
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d002      	beq.n	80023c2 <RCCEx_PLLSAI1_Config+0x62>
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d009      	beq.n	80023d4 <RCCEx_PLLSAI1_Config+0x74>
 80023c0:	e020      	b.n	8002404 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023c2:	4b5f      	ldr	r3, [pc, #380]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d11d      	bne.n	800240a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d2:	e01a      	b.n	800240a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023d4:	4b5a      	ldr	r3, [pc, #360]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d116      	bne.n	800240e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e4:	e013      	b.n	800240e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023e6:	4b56      	ldr	r3, [pc, #344]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10f      	bne.n	8002412 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023f2:	4b53      	ldr	r3, [pc, #332]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002402:	e006      	b.n	8002412 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
      break;
 8002408:	e004      	b.n	8002414 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800240a:	bf00      	nop
 800240c:	e002      	b.n	8002414 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800240e:	bf00      	nop
 8002410:	e000      	b.n	8002414 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002412:	bf00      	nop
    }

    if(status == HAL_OK)
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10d      	bne.n	8002436 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800241a:	4b49      	ldr	r3, [pc, #292]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6819      	ldr	r1, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	430b      	orrs	r3, r1
 8002430:	4943      	ldr	r1, [pc, #268]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002432:	4313      	orrs	r3, r2
 8002434:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d17c      	bne.n	8002536 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800243c:	4b40      	ldr	r3, [pc, #256]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a3f      	ldr	r2, [pc, #252]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002442:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002448:	f7fe fb14 	bl	8000a74 <HAL_GetTick>
 800244c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800244e:	e009      	b.n	8002464 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002450:	f7fe fb10 	bl	8000a74 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d902      	bls.n	8002464 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	73fb      	strb	r3, [r7, #15]
        break;
 8002462:	e005      	b.n	8002470 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002464:	4b36      	ldr	r3, [pc, #216]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ef      	bne.n	8002450 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d15f      	bne.n	8002536 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d110      	bne.n	800249e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800247c:	4b30      	ldr	r3, [pc, #192]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002484:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6892      	ldr	r2, [r2, #8]
 800248c:	0211      	lsls	r1, r2, #8
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68d2      	ldr	r2, [r2, #12]
 8002492:	06d2      	lsls	r2, r2, #27
 8002494:	430a      	orrs	r2, r1
 8002496:	492a      	ldr	r1, [pc, #168]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002498:	4313      	orrs	r3, r2
 800249a:	610b      	str	r3, [r1, #16]
 800249c:	e027      	b.n	80024ee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d112      	bne.n	80024ca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024a4:	4b26      	ldr	r3, [pc, #152]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6892      	ldr	r2, [r2, #8]
 80024b4:	0211      	lsls	r1, r2, #8
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6912      	ldr	r2, [r2, #16]
 80024ba:	0852      	lsrs	r2, r2, #1
 80024bc:	3a01      	subs	r2, #1
 80024be:	0552      	lsls	r2, r2, #21
 80024c0:	430a      	orrs	r2, r1
 80024c2:	491f      	ldr	r1, [pc, #124]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	610b      	str	r3, [r1, #16]
 80024c8:	e011      	b.n	80024ee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ca:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6892      	ldr	r2, [r2, #8]
 80024da:	0211      	lsls	r1, r2, #8
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6952      	ldr	r2, [r2, #20]
 80024e0:	0852      	lsrs	r2, r2, #1
 80024e2:	3a01      	subs	r2, #1
 80024e4:	0652      	lsls	r2, r2, #25
 80024e6:	430a      	orrs	r2, r1
 80024e8:	4915      	ldr	r1, [pc, #84]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024ee:	4b14      	ldr	r3, [pc, #80]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a13      	ldr	r2, [pc, #76]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fa:	f7fe fabb 	bl	8000a74 <HAL_GetTick>
 80024fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002500:	e009      	b.n	8002516 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002502:	f7fe fab7 	bl	8000a74 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d902      	bls.n	8002516 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	73fb      	strb	r3, [r7, #15]
          break;
 8002514:	e005      	b.n	8002522 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002516:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0ef      	beq.n	8002502 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d106      	bne.n	8002536 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4903      	ldr	r1, [pc, #12]	; (8002540 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002532:	4313      	orrs	r3, r2
 8002534:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002536:	7bfb      	ldrb	r3, [r7, #15]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000

08002544 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d079      	beq.n	800264a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe f984 	bl	8000878 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b10      	cmp	r3, #16
 8002584:	d058      	beq.n	8002638 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	22ca      	movs	r2, #202	; 0xca
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2253      	movs	r2, #83	; 0x53
 8002594:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa4e 	bl	8002a38 <RTC_EnterInitMode>
 800259c:	4603      	mov	r3, r0
 800259e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d127      	bne.n	80025f6 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80025b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025b8:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6899      	ldr	r1, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68d2      	ldr	r2, [r2, #12]
 80025e0:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6919      	ldr	r1, [r3, #16]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	041a      	lsls	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fa52 	bl	8002aa0 <RTC_ExitInitMode>
 80025fc:	4603      	mov	r3, r0
 80025fe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d113      	bne.n	800262e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0203 	bic.w	r2, r2, #3
 8002614:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	22ff      	movs	r2, #255	; 0xff
 8002634:	625a      	str	r2, [r3, #36]	; 0x24
 8002636:	e001      	b.n	800263c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d103      	bne.n	800264a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800264a:	7bfb      	ldrb	r3, [r7, #15]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002654:	b590      	push	{r4, r7, lr}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_RTC_SetTime+0x1a>
 800266a:	2302      	movs	r3, #2
 800266c:	e08b      	b.n	8002786 <HAL_RTC_SetTime+0x132>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2202      	movs	r2, #2
 800267a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	22ca      	movs	r2, #202	; 0xca
 8002684:	625a      	str	r2, [r3, #36]	; 0x24
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2253      	movs	r2, #83	; 0x53
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f9d2 	bl	8002a38 <RTC_EnterInitMode>
 8002694:	4603      	mov	r3, r0
 8002696:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d163      	bne.n	8002766 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d126      	bne.n	80026f2 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d102      	bne.n	80026b8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2200      	movs	r2, #0
 80026b6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fa2d 	bl	8002b1c <RTC_ByteToBcd2>
 80026c2:	4603      	mov	r3, r0
 80026c4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	785b      	ldrb	r3, [r3, #1]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fa26 	bl	8002b1c <RTC_ByteToBcd2>
 80026d0:	4603      	mov	r3, r0
 80026d2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80026d4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	789b      	ldrb	r3, [r3, #2]
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fa1e 	bl	8002b1c <RTC_ByteToBcd2>
 80026e0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80026e2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	78db      	ldrb	r3, [r3, #3]
 80026ea:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	e018      	b.n	8002724 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2200      	movs	r2, #0
 8002704:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	785b      	ldrb	r3, [r3, #1]
 8002710:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002712:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002718:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	78db      	ldrb	r3, [r3, #3]
 800271e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800272e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002732:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002742:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6899      	ldr	r1, [r3, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	431a      	orrs	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f99f 	bl	8002aa0 <RTC_ExitInitMode>
 8002762:	4603      	mov	r3, r0
 8002764:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	22ff      	movs	r2, #255	; 0xff
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800276e:	7cfb      	ldrb	r3, [r7, #19]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d103      	bne.n	800277c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002784:	7cfb      	ldrb	r3, [r7, #19]
}
 8002786:	4618      	mov	r0, r3
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd90      	pop	{r4, r7, pc}

0800278e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80027bc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80027c0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	0c1b      	lsrs	r3, r3, #16
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	0a1b      	lsrs	r3, r3, #8
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	0d9b      	lsrs	r3, r3, #22
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d11a      	bne.n	800283c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f9a6 	bl	8002b5c <RTC_Bcd2ToByte>
 8002810:	4603      	mov	r3, r0
 8002812:	461a      	mov	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	785b      	ldrb	r3, [r3, #1]
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f99d 	bl	8002b5c <RTC_Bcd2ToByte>
 8002822:	4603      	mov	r3, r0
 8002824:	461a      	mov	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	789b      	ldrb	r3, [r3, #2]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 f994 	bl	8002b5c <RTC_Bcd2ToByte>
 8002834:	4603      	mov	r3, r0
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002846:	b590      	push	{r4, r7, lr}
 8002848:	b087      	sub	sp, #28
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_RTC_SetDate+0x1a>
 800285c:	2302      	movs	r3, #2
 800285e:	e075      	b.n	800294c <HAL_RTC_SetDate+0x106>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10e      	bne.n	8002894 <HAL_RTC_SetDate+0x4e>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	785b      	ldrb	r3, [r3, #1]
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	d008      	beq.n	8002894 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	785b      	ldrb	r3, [r3, #1]
 8002886:	f023 0310 	bic.w	r3, r3, #16
 800288a:	b2db      	uxtb	r3, r3
 800288c:	330a      	adds	r3, #10
 800288e:	b2da      	uxtb	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d11c      	bne.n	80028d4 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	78db      	ldrb	r3, [r3, #3]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f93c 	bl	8002b1c <RTC_ByteToBcd2>
 80028a4:	4603      	mov	r3, r0
 80028a6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	785b      	ldrb	r3, [r3, #1]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 f935 	bl	8002b1c <RTC_ByteToBcd2>
 80028b2:	4603      	mov	r3, r0
 80028b4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80028b6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	789b      	ldrb	r3, [r3, #2]
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 f92d 	bl	8002b1c <RTC_ByteToBcd2>
 80028c2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80028c4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e00e      	b.n	80028f2 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	78db      	ldrb	r3, [r3, #3]
 80028d8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	785b      	ldrb	r3, [r3, #1]
 80028de:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80028e0:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80028e6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	22ca      	movs	r2, #202	; 0xca
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2253      	movs	r2, #83	; 0x53
 8002900:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f898 	bl	8002a38 <RTC_EnterInitMode>
 8002908:	4603      	mov	r3, r0
 800290a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10c      	bne.n	800292c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800291c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002920:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f8bc 	bl	8002aa0 <RTC_ExitInitMode>
 8002928:	4603      	mov	r3, r0
 800292a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	22ff      	movs	r2, #255	; 0xff
 8002932:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d103      	bne.n	8002942 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800294a:	7cfb      	ldrb	r3, [r7, #19]
}
 800294c:	4618      	mov	r0, r3
 800294e:	371c      	adds	r7, #28
 8002950:	46bd      	mov	sp, r7
 8002952:	bd90      	pop	{r4, r7, pc}

08002954 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800296a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800296e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	0c1b      	lsrs	r3, r3, #16
 8002974:	b2da      	uxtb	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	b2da      	uxtb	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002992:	b2da      	uxtb	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	0b5b      	lsrs	r3, r3, #13
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d11a      	bne.n	80029e4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	78db      	ldrb	r3, [r3, #3]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f8d2 	bl	8002b5c <RTC_Bcd2ToByte>
 80029b8:	4603      	mov	r3, r0
 80029ba:	461a      	mov	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	785b      	ldrb	r3, [r3, #1]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f8c9 	bl	8002b5c <RTC_Bcd2ToByte>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	789b      	ldrb	r3, [r3, #2]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f8c0 	bl	8002b5c <RTC_Bcd2ToByte>
 80029dc:	4603      	mov	r3, r0
 80029de:	461a      	mov	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0d      	ldr	r2, [pc, #52]	; (8002a34 <HAL_RTC_WaitForSynchro+0x44>)
 80029fe:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002a00:	f7fe f838 	bl	8000a74 <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a06:	e009      	b.n	8002a1c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a08:	f7fe f834 	bl	8000a74 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a16:	d901      	bls.n	8002a1c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e007      	b.n	8002a2c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0ee      	beq.n	8002a08 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	0003ff5f 	.word	0x0003ff5f

08002a38 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d120      	bne.n	8002a94 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f04f 32ff 	mov.w	r2, #4294967295
 8002a5a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002a5c:	f7fe f80a 	bl	8000a74 <HAL_GetTick>
 8002a60:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002a62:	e00d      	b.n	8002a80 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002a64:	f7fe f806 	bl	8000a74 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a72:	d905      	bls.n	8002a80 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <RTC_EnterInitMode+0x5c>
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d1e7      	bne.n	8002a64 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002aac:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <RTC_ExitInitMode+0x78>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a19      	ldr	r2, [pc, #100]	; (8002b18 <RTC_ExitInitMode+0x78>)
 8002ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ab6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002ab8:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <RTC_ExitInitMode+0x78>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10c      	bne.n	8002ade <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ff93 	bl	80029f0 <HAL_RTC_WaitForSynchro>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01e      	beq.n	8002b0e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	e017      	b.n	8002b0e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002ade:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <RTC_ExitInitMode+0x78>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	4a0d      	ldr	r2, [pc, #52]	; (8002b18 <RTC_ExitInitMode+0x78>)
 8002ae4:	f023 0320 	bic.w	r3, r3, #32
 8002ae8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ff80 	bl	80029f0 <HAL_RTC_WaitForSynchro>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2203      	movs	r2, #3
 8002afa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002b02:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <RTC_ExitInitMode+0x78>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <RTC_ExitInitMode+0x78>)
 8002b08:	f043 0320 	orr.w	r3, r3, #32
 8002b0c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40002800 	.word	0x40002800

08002b1c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002b2e:	e005      	b.n	8002b3c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3301      	adds	r3, #1
 8002b34:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8002b36:	7afb      	ldrb	r3, [r7, #11]
 8002b38:	3b0a      	subs	r3, #10
 8002b3a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8002b3c:	7afb      	ldrb	r3, [r7, #11]
 8002b3e:	2b09      	cmp	r3, #9
 8002b40:	d8f6      	bhi.n	8002b30 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	7afb      	ldrb	r3, [r7, #11]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	b2db      	uxtb	r3, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	0092      	lsls	r2, r2, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	4413      	add	r3, r2
 8002b82:	b2db      	uxtb	r3, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3350      	adds	r3, #80	; 0x50
 8002ba2:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	009a      	lsls	r2, r3, #2
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	4413      	add	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6013      	str	r3, [r2, #0]
}
 8002bb6:	bf00      	nop
 8002bb8:	371c      	adds	r7, #28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3350      	adds	r3, #80	; 0x50
 8002bd2:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4413      	add	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <memset>:
 8002bee:	4402      	add	r2, r0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d100      	bne.n	8002bf8 <memset+0xa>
 8002bf6:	4770      	bx	lr
 8002bf8:	f803 1b01 	strb.w	r1, [r3], #1
 8002bfc:	e7f9      	b.n	8002bf2 <memset+0x4>
	...

08002c00 <__libc_init_array>:
 8002c00:	b570      	push	{r4, r5, r6, lr}
 8002c02:	4d0d      	ldr	r5, [pc, #52]	; (8002c38 <__libc_init_array+0x38>)
 8002c04:	4c0d      	ldr	r4, [pc, #52]	; (8002c3c <__libc_init_array+0x3c>)
 8002c06:	1b64      	subs	r4, r4, r5
 8002c08:	10a4      	asrs	r4, r4, #2
 8002c0a:	2600      	movs	r6, #0
 8002c0c:	42a6      	cmp	r6, r4
 8002c0e:	d109      	bne.n	8002c24 <__libc_init_array+0x24>
 8002c10:	4d0b      	ldr	r5, [pc, #44]	; (8002c40 <__libc_init_array+0x40>)
 8002c12:	4c0c      	ldr	r4, [pc, #48]	; (8002c44 <__libc_init_array+0x44>)
 8002c14:	f000 f818 	bl	8002c48 <_init>
 8002c18:	1b64      	subs	r4, r4, r5
 8002c1a:	10a4      	asrs	r4, r4, #2
 8002c1c:	2600      	movs	r6, #0
 8002c1e:	42a6      	cmp	r6, r4
 8002c20:	d105      	bne.n	8002c2e <__libc_init_array+0x2e>
 8002c22:	bd70      	pop	{r4, r5, r6, pc}
 8002c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c28:	4798      	blx	r3
 8002c2a:	3601      	adds	r6, #1
 8002c2c:	e7ee      	b.n	8002c0c <__libc_init_array+0xc>
 8002c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c32:	4798      	blx	r3
 8002c34:	3601      	adds	r6, #1
 8002c36:	e7f2      	b.n	8002c1e <__libc_init_array+0x1e>
 8002c38:	08002ca0 	.word	0x08002ca0
 8002c3c:	08002ca0 	.word	0x08002ca0
 8002c40:	08002ca0 	.word	0x08002ca0
 8002c44:	08002ca4 	.word	0x08002ca4

08002c48 <_init>:
 8002c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4a:	bf00      	nop
 8002c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4e:	bc08      	pop	{r3}
 8002c50:	469e      	mov	lr, r3
 8002c52:	4770      	bx	lr

08002c54 <_fini>:
 8002c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c56:	bf00      	nop
 8002c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5a:	bc08      	pop	{r3}
 8002c5c:	469e      	mov	lr, r3
 8002c5e:	4770      	bx	lr
